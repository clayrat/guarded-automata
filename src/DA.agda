{-# OPTIONS --guarded #-}
module DA where

import Prelude as P hiding (Tactic-bishop-finite ; ord‚Üíis-discrete)
open P
open import Data.Unit
open import Data.Bool hiding (_‚äï_)
open import Data.Dec
open import Data.Maybe as Maybe
open import Data.List

open import Later
open import Clocked.Moore
open import Lang

private variable
  ‚Ñì : Level
  A S S‚ÇÅ S‚ÇÇ : ùí∞ ‚Ñì
  Œ∫ : Cl

record DA (A : ùí∞ ‚Ñì) (S : ùí∞ ‚Ñì) : ùí∞ ‚Ñì where
  constructor mkDA
  field ŒΩ : (s : S) ‚Üí Bool
        Œ¥ : (s : S) (a : A) ‚Üí S

unroll : DA A S ‚Üí S ‚Üí Bool √ó (A ‚Üí S)
unroll da s = (DA.ŒΩ da s , DA.Œ¥ da s)

ŒΩs : DA A S ‚Üí List S ‚Üí Bool
ŒΩs da = any (DA.ŒΩ da)

Œ¥s : DA A S ‚Üí List S ‚Üí A ‚Üí List S
Œ¥s da ss a = map (Œª s ‚Üí DA.Œ¥ da s a) ss

lang·µè : DA A S ‚Üí S ‚Üí gLang Œ∫ A
lang·µè = unfold·µè ‚àò unroll

lang : DA A S ‚Üí S ‚Üí Lang A
lang da s Œ∫ = lang·µè da s

-- constructions

‚àÖA : DA A ‚ä§
‚àÖA = mkDA (Œª _ ‚Üí false) Œª _ _ ‚Üí tt

ŒµA : DA A Bool
ŒµA = mkDA id Œª _ _ ‚Üí false

data ST3 : ùí∞ where
  init acc err : ST3

charA : ‚¶É dA : is-discrete A ‚¶Ñ
      ‚Üí A ‚Üí DA A ST3
charA {A} a = mkDA cŒΩ cŒ¥
  where
  cŒΩ : ST3 ‚Üí Bool
  cŒΩ init = false
  cŒΩ acc = true
  cŒΩ err = false
  cŒ¥ : ST3 ‚Üí A ‚Üí ST3
  cŒ¥ init x = if ‚åä x ‚âü a ‚åã then acc else err
  cŒ¥ acc  x = err
  cŒ¥ err  x = err

complA : DA A S ‚Üí DA A S
complA da = mkDA (not ‚àò DA.ŒΩ da) (DA.Œ¥ da)

-- product automaton
_‚äï_ : DA A S‚ÇÅ ‚Üí DA A S‚ÇÇ ‚Üí DA A (S‚ÇÅ √ó S‚ÇÇ)
da1 ‚äï da2 = mkDA (Œª s ‚Üí DA.ŒΩ da1 (s .fst) or DA.ŒΩ da2 (s .snd))
                  Œª s a ‚Üí (DA.Œ¥ da1 (s. fst) a) , (DA.Œ¥ da2 (s. snd) a)

-- power automaton
powA : DA A S ‚Üí DA A (List S)
powA da = mkDA (ŒΩs da) (Œ¥s da)

powA-nil·µè : (da : DA A S) ‚Üí lang·µè {Œ∫ = Œ∫} (powA da) [] Ôºù ‚àÖ·µè
powA-nil·µè {Œ∫} da = fix {k = Œ∫} Œª ih‚ñπ ‚Üí
  lang·µè (powA da) []
    Ôºù‚ü® ap (_$ []) (fix-path (unfold·µè-body (unroll $ powA da))) ‚ü©
  unfold·µè-body (unroll $ powA da) (next (lang·µè (powA da))) []
    Ôºù‚ü® ap (Mre·µè false) (fun-ext Œª _ ‚Üí ‚ñπ-ext ih‚ñπ) ‚ü©
  pure·µè-body false (next ‚àÖ·µè)
    ÔºùÀò‚ü® fix-path (pure·µè-body false) ‚ü©
  ‚àÖ·µè
    ‚àé

powA-nil : (da : DA A S) ‚Üí lang (powA da) [] Ôºù ‚àÖ
powA-nil da = fun-ext Œª Œ∫ ‚Üí powA-nil·µè da

powA-cons·µè : (da : DA A S) (s : S) (ss : List S)
           ‚Üí lang·µè {Œ∫ = Œ∫} (powA da) (s ‚à∑ ss) Ôºù lang·µè da s ‚ãÉ·µè lang·µè (powA da) ss
powA-cons·µè {Œ∫} da = fix {k = Œ∫} Œª ih‚ñπ s ss ‚Üí
  lang·µè (powA da) (s ‚à∑ ss)
    Ôºù‚ü® ap (_$ s ‚à∑ ss) (fix-path (unfold·µè-body (unroll $ powA da))) ‚ü©
  unfold·µè-body (unroll $ powA da) (next (lang·µè (powA da))) (s ‚à∑ ss)
    Ôºù‚ü® ap¬≤ Mre·µè refl (fun-ext Œª a ‚Üí ‚ñπ-ext (ih‚ñπ ‚äõ next (DA.Œ¥ da s a) ‚äõ next (Œ¥s da ss a))) ‚ü©
  ap·µè-body (next ap·µè) (map·µè-body _or_ (next (map·µè _or_)) (unfold·µè-body (unroll da) (next (lang·µè da)) s)) (unfold·µè-body (unroll $ powA da) (next (lang·µè (powA da))) ss)
    ÔºùÀò‚ü® zipWith·µè-eq {f = _or_} {b = unfold·µè-body (unroll da) (next (lang·µè da)) s} ‚ü©
  (unfold·µè-body (unroll da) (next (lang·µè da)) s ‚ãÉ·µè unfold·µè-body (unroll $ powA da) (next (lang·µè (powA da))) ss)
    ÔºùÀò‚ü® ap (Œª q ‚Üí unfold·µè-body (unroll da) (next (lang·µè da)) s ‚ãÉ·µè q ss) (fix-path (unfold·µè-body (unroll $ powA da))) ‚ü©
  (unfold·µè-body (unroll da) (next (lang·µè da)) s ‚ãÉ·µè lang·µè (powA da) ss)
    ÔºùÀò‚ü® ap (Œª q ‚Üí q s ‚ãÉ·µè lang·µè (powA da) ss) (fix-path (unfold·µè-body (unroll da))) ‚ü©
  lang·µè da s ‚ãÉ·µè lang·µè (powA da) ss
    ‚àé

powA-cons : (da : DA A S) (s : S) (ss : List S)
          ‚Üí lang (powA da) (s ‚à∑ ss) Ôºù lang da s ‚ãÉ lang (powA da) ss
powA-cons da s ss = fun-ext Œª Œ∫ ‚Üí powA-cons·µè da s ss

-- composition automaton
composeA : DA A S‚ÇÅ ‚Üí S‚ÇÇ ‚Üí DA A S‚ÇÇ ‚Üí DA A (S‚ÇÅ √ó List S‚ÇÇ)
composeA da1 s da2 =
  mkDA (Œª s12 ‚Üí DA.ŒΩ da1 (s12 .fst) and DA.ŒΩ da2 s or ŒΩs da2 (s12 .snd))
       (Œª s12 a ‚Üí (  DA.Œ¥ da1 (s12 .fst) a)
                   , Œ¥s da2 (if DA.ŒΩ da1 (s12 .fst) then s ‚à∑ s12 .snd else s12 .snd) a)

composeA-gen·µè : (da1 : DA A S‚ÇÅ) (da2 : DA A S‚ÇÇ)
              ‚Üí (s1 : S‚ÇÅ) ‚Üí (s2 : S‚ÇÇ) (ss : List S‚ÇÇ)
              ‚Üí lang·µè {Œ∫ = Œ∫} (composeA da1 s2 da2) (s1 , ss)
                  Ôºù
                (lang·µè da1 s1 ¬∑·µè lang·µè da2 s2) ‚ãÉ·µè lang·µè (powA da2) ss
composeA-gen·µè {A} {S‚ÇÅ} {S‚ÇÇ} {Œ∫} da1 da2 = fix {k = Œ∫} Œª ih‚ñπ s1 s2 ss ‚Üí
  lang·µè (composeA da1 s2 da2) (s1 , ss)
    Ôºù‚ü® ap (_$ (s1 , ss)) (fix-path (unfold·µè-body (unroll $ composeA da1 s2 da2))) ‚ü©
  Mre·µè (DA.ŒΩ da1 s1 and DA.ŒΩ da2 s2 or ŒΩs da2 ss)
       (Œª a ‚Üí next (lang·µè (composeA da1 s2 da2) ((DA.Œ¥ da1 s1 a) , Œ¥s da2 (if DA.ŒΩ da1 s1 then s2 ‚à∑ ss else ss) a)))
    Ôºù‚ü® ap¬≤ Mre·µè refl (fun-ext Œª a ‚Üí ‚ñπ-ext Œª Œ± ‚Üí go {ih‚ñπ = ih‚ñπ}) ‚ü©
  ap·µè-body (next ap·µè)
   (map·µè-body _or_ (next (map·µè _or_))
    (¬∑·µè-body (next _¬∑·µè_) (unfold·µè-body (unroll da1) (next (lang·µè da1)) s1) (unfold·µè-body (unroll da2) (next (lang·µè da2)) s2)))
    (unfold·µè-body (unroll $ powA da2) (next (lang·µè (powA da2))) ss)
    Ôºù‚ü® sym (zipWith·µè-eq {b = (¬∑·µè-body (next _¬∑·µè_) (unfold·µè-body (unroll da1) (next (lang·µè da1)) s1) (unfold·µè-body (unroll da2) (next (lang·µè da2)) s2))}) ‚ü©
  (¬∑·µè-body (next _¬∑·µè_) (unfold·µè-body (unroll da1) (next (lang·µè da1)) s1) (unfold·µè-body (unroll da2) (next (lang·µè da2)) s2) ‚ãÉ·µè unfold·µè-body (unroll $ powA da2) (next (lang·µè (powA da2))) ss)
    Ôºù‚ü® ap (Œª q ‚Üí q (unfold·µè-body (unroll da1) (next (lang·µè da1)) s1) (unfold·µè-body (unroll da2) (next (lang·µè da2)) s2) ‚ãÉ·µè unfold·µè-body (unroll $ powA da2) (next (lang·µè (powA da2))) ss)
           (sym $ fix-path ¬∑·µè-body) ‚ü©
  ((unfold·µè-body (unroll da1) (next (lang·µè da1)) s1 ¬∑·µè unfold·µè-body (unroll da2) (next (lang·µè da2)) s2) ‚ãÉ·µè unfold·µè-body (unroll $ powA da2) (next (lang·µè (powA da2))) ss)
    Ôºù‚ü® ap (Œª q ‚Üí (q s1 ¬∑·µè unfold·µè-body (unroll da2) (next (lang·µè da2)) s2) ‚ãÉ·µè unfold·µè-body (unroll $ powA da2) (next (lang·µè (powA da2))) ss) (sym $ fix-path (unfold·µè-body (unroll da1))) ‚ü©
  ((lang·µè da1 s1 ¬∑·µè unfold·µè-body (unroll da2) (next (lang·µè da2)) s2) ‚ãÉ·µè unfold·µè-body (unroll $ powA da2) (next (lang·µè (powA da2))) ss)
    Ôºù‚ü® ap (Œª q ‚Üí (lang·µè da1 s1 ¬∑·µè q s2) ‚ãÉ·µè unfold·µè-body (unroll $ powA da2) (next (lang·µè (powA da2))) ss) (sym $ fix-path (unfold·µè-body (unroll da2))) ‚ü©
  ((lang·µè da1 s1 ¬∑·µè lang·µè da2 s2) ‚ãÉ·µè unfold·µè-body (unroll $ powA da2) (next (lang·µè (powA da2))) ss)
    Ôºù‚ü® ap (Œª q ‚Üí (lang·µè da1 s1 ¬∑·µè lang·µè da2 s2) ‚ãÉ·µè q ss) (sym $ fix-path (unfold·µè-body (unroll $ powA da2))) ‚ü©
  ((lang·µè da1 s1 ¬∑·µè lang·µè da2 s2) ‚ãÉ·µè lang·µè (powA da2) ss)
    ‚àé
  where
  go : {ih‚ñπ : ‚ñπ Œ∫ ((s1 : S‚ÇÅ) (s2 : S‚ÇÇ) (ss : List S‚ÇÇ)
                   ‚Üí lang·µè {Œ∫ = Œ∫} (composeA da1 s2 da2) (s1 , ss) Ôºù ((lang·µè da1 s1 ¬∑·µè lang·µè da2 s2) ‚ãÉ·µè lang·µè (powA da2) ss)) }
       {s1 : S‚ÇÅ} {s2 : S‚ÇÇ} {ss : List S‚ÇÇ} {a : A} {@tick Œ± : Tick Œ∫}
     ‚Üí (lang·µè (composeA da1 s2 da2) (DA.Œ¥ da1 s1 a , Œ¥s da2 (if DA.ŒΩ da1 s1 then s2 ‚à∑ ss else ss) a))
         Ôºù
       ((‚ñπmap _‚ãÉ·µè_ (cond·µè (DA.ŒΩ da1 s1) (next ((lang·µè da1 (DA.Œ¥ da1 s1 a)) ¬∑·µè (Mre·µè (DA.ŒΩ da2 s2) (Œª a‚ÇÅ ‚Üí next (lang·µè da2 (DA.Œ¥ da2 s2 a‚ÇÅ))))))
                                        (next (lang·µè da2 (DA.Œ¥ da2 s2 a))))
                ‚äõ (next (lang·µè (powA da2) (Œ¥s da2 ss a)))) Œ±)
  go {ih‚ñπ} {s1} {s2} {ss} {a} {Œ±} with DA.ŒΩ da1 s1
  ... | true  =
         (lang·µè (composeA da1 s2 da2) (DA.Œ¥ da1 s1 a , Œ¥s da2 (s2 ‚à∑ ss) a))
           Ôºù‚ü® ih‚ñπ Œ± (DA.Œ¥ da1 s1 a) s2 (Œ¥s da2 (s2 ‚à∑ ss) a) ‚ü©
         ((lang·µè da1 (DA.Œ¥ da1 s1 a) ¬∑·µè lang·µè da2 s2) ‚ãÉ·µè ‚åú lang·µè (powA da2) (Œ¥s da2 (s2 ‚à∑ ss) a) ‚åù)
           Ôºù‚ü® ap! (powA-cons·µè da2 (DA.Œ¥ da2 s2 a) (Œ¥s da2 ss a)) ‚ü©
         ((lang·µè da1 (DA.Œ¥ da1 s1 a) ¬∑·µè lang·µè da2 s2) ‚ãÉ·µè (lang·µè da2 (DA.Œ¥ da2 s2 a) ‚ãÉ·µè lang·µè (powA da2) (Œ¥s da2 ss a)))
           Ôºù‚ü® ap (Œª q ‚Üí (lang·µè da1 (DA.Œ¥ da1 s1 a) ¬∑·µè q s2) ‚ãÉ·µè (lang·µè da2 (DA.Œ¥ da2 s2 a) ‚ãÉ·µè lang·µè (powA da2) (Œ¥s da2 ss a))) (fix-path (unfold·µè-body (unroll da2))) ‚ü©
         (lang·µè da1 (DA.Œ¥ da1 s1 a) ¬∑·µè Mre·µè (DA.ŒΩ da2 s2) (Œª a‚ÇÅ ‚Üí next (lang·µè da2 (DA.Œ¥ da2 s2 a‚ÇÅ)))) ‚ãÉ·µè (lang·µè da2 (DA.Œ¥ da2 s2 a) ‚ãÉ·µè lang·µè (powA da2) (Œ¥s da2 ss a))
           Ôºù‚ü® sym (union·µè-assoc {k = lang·µè da1 (DA.Œ¥ da1 s1 a) ¬∑·µè Mre·µè (DA.ŒΩ da2 s2) (Œª a‚ÇÅ ‚Üí next (lang·µè da2 (DA.Œ¥ da2 s2 a‚ÇÅ)))}) ‚ü©
         (((lang·µè da1 (DA.Œ¥ da1 s1 a) ¬∑·µè Mre·µè (DA.ŒΩ da2 s2) (Œª a‚ÇÅ ‚Üí next (lang·µè da2 (DA.Œ¥ da2 s2 a‚ÇÅ)))) ‚ãÉ·µè lang·µè da2 (DA.Œ¥ da2 s2 a)) ‚ãÉ·µè lang·µè (powA da2) (Œ¥s da2 ss a))
            ‚àé
  ... | false =
         (lang·µè (composeA da1 s2 da2) (DA.Œ¥ da1 s1 a , Œ¥s da2 ss a))
           Ôºù‚ü® ih‚ñπ Œ± (DA.Œ¥ da1 s1 a) s2 (Œ¥s da2 ss a) ‚ü©
         ((lang·µè da1 (DA.Œ¥ da1 s1 a) ¬∑·µè lang·µè da2 s2) ‚ãÉ·µè lang·µè (powA da2) (Œ¥s da2 ss a))
           Ôºù‚ü® ap (Œª q ‚Üí (lang·µè da1 (DA.Œ¥ da1 s1 a) ¬∑·µè q s2) ‚ãÉ·µè lang·µè (powA da2) (Œ¥s da2 ss a)) (fix-path (unfold·µè-body (unroll da2))) ‚ü©
         ((lang·µè da1 (DA.Œ¥ da1 s1 a) ¬∑·µè (Mre·µè (DA.ŒΩ da2 s2) (Œª a‚ÇÅ ‚Üí next (lang·µè da2 (DA.Œ¥ da2 s2 a‚ÇÅ))))) ‚ãÉ·µè (lang·µè (powA da2) (Œ¥s da2 ss a)))
           ‚àé

composeA-gen : ‚àÄ {S‚ÇÅ S‚ÇÇ : ùí∞ ‚Ñì}
              ‚Üí (da1 : DA A S‚ÇÅ) (da2 : DA A S‚ÇÇ)
              ‚Üí (s1 : S‚ÇÅ) (s2 : S‚ÇÇ) (ss : List S‚ÇÇ)
              ‚Üí lang (composeA da1 s2 da2) (s1 , ss)
                  Ôºù
                (lang da1 s1 ¬∑ lang da2 s2) ‚ãÉ lang (powA da2) ss
composeA-gen da1 da2 s1 s2 ss = fun-ext Œª Œ∫ ‚Üí composeA-gen·µè da1 da2 s1 s2 ss

composeA-correct : ‚àÄ {S‚ÇÅ S‚ÇÇ : ùí∞ ‚Ñì}
                 ‚Üí (da1 : DA A S‚ÇÅ) (da2 : DA A S‚ÇÇ)
                 ‚Üí (s1 : S‚ÇÅ) (s2 : S‚ÇÇ)
                 ‚Üí lang (composeA da1 s2 da2) (s1 , []) Ôºù lang da1 s1 ¬∑ lang da2 s2
composeA-correct da1 da2 s1 s2 =
    composeA-gen da1 da2 s1 s2 []
  ‚àô ap ((lang da1 s1 ¬∑ lang da2 s2) ‚ãÉ_) (powA-nil da2)
  ‚àô union-empty-r {l = lang da1 s1 ¬∑ lang da2 s2}

-- star automaton

acceptingInitial : S ‚Üí DA A S ‚Üí DA A (Maybe S)
acceptingInitial s0 da =
  mkDA (Maybe.rec true (DA.ŒΩ da))
       (Maybe.rec (just ‚àò DA.Œ¥ da s0) (Œª s ‚Üí just ‚àò DA.Œ¥ da s))

finalToInitial : DA A (Maybe S) ‚Üí DA A (List (Maybe S))
finalToInitial da =
   mkDA (ŒΩs da)
        (Œª ss a ‚Üí let ss‚Ä≤ = Œ¥s da ss a in
                  if ŒΩs da ss then DA.Œ¥ da nothing a ‚à∑ ss‚Ä≤
                              else ss‚Ä≤)

starA : S ‚Üí DA A S ‚Üí DA A (List (Maybe S))
starA s0 da = finalToInitial (acceptingInitial s0 da)

acceptingInitial-just·µè : (s0 : S) (da : DA A S) (s : S)
                       ‚Üí lang·µè {Œ∫ = Œ∫} (acceptingInitial s0 da) (just s) Ôºù lang·µè da s
acceptingInitial-just·µè {Œ∫} s0 da = fix {k = Œ∫} Œª ih‚ñπ s ‚Üí
  lang·µè (acceptingInitial s0 da) (just s)
    Ôºù‚ü® ap (_$ just s) (fix-path (unfold·µè-body (unroll (acceptingInitial s0 da)))) ‚ü©
  Mre·µè (DA.ŒΩ da s) (Œª a ‚Üí next (lang·µè (acceptingInitial s0 da) (just (DA.Œ¥ da s a))))
    Ôºù‚ü® ap (Mre·µè (DA.ŒΩ da s)) (fun-ext Œª a ‚Üí ‚ñπ-ext (ih‚ñπ ‚äõ next (DA.Œ¥ da s a))) ‚ü©
  Mre·µè (DA.ŒΩ da s) (Œª a ‚Üí next (lang·µè da (DA.Œ¥ da s a)))
    Ôºù‚ü® ap (_$ s) (sym $ fix-path (unfold·µè-body (unroll da))) ‚ü©
  lang·µè da s
    ‚àé

acceptingInitial-just : (s0 : S) (da : DA A S) (s : S)
                      ‚Üí lang (acceptingInitial s0 da) (just s) Ôºù lang da s
acceptingInitial-just s0 da s = fun-ext Œª Œ∫ ‚Üí acceptingInitial-just·µè s0 da s

acceptingInitial-nothing·µè : (s0 : S) (da : DA A S)
                          ‚Üí lang·µè {Œ∫ = Œ∫} (acceptingInitial s0 da) nothing Ôºù Œµ·µè ‚ãÉ·µè lang·µè da s0
acceptingInitial-nothing·µè {Œ∫} s0 da = fix {k = Œ∫} Œª ih‚ñπ ‚Üí
  lang·µè (acceptingInitial s0 da) nothing
    Ôºù‚ü® ap (_$ nothing) (fix-path (unfold·µè-body (unroll (acceptingInitial s0 da)))) ‚ü©
  Mre·µè true (Œª a ‚Üí next (lang·µè (acceptingInitial s0 da) (just (DA.Œ¥ da s0 a))))
    Ôºù‚ü® ap (Mre·µè true) (fun-ext Œª a ‚Üí ‚ñπ-ext Œª Œ± ‚Üí acceptingInitial-just·µè s0 da (DA.Œ¥ da s0 a)
                                               ‚àô sym union-empty-l·µè) ‚ü©
  Mre·µè true (Œª a ‚Üí next (‚àÖ·µè ‚ãÉ·µè lang·µè da (DA.Œ¥ da s0 a)))
    Ôºù‚ü® sym (zipWith·µè-eq {c = unfold·µè-body (unroll da) (next (lang·µè da)) s0}) ‚ü©
  (Œµ·µè ‚ãÉ·µè unfold·µè-body (unroll da) (next (lang·µè da)) s0)
    Ôºù‚ü® ap (Œª q ‚Üí Œµ·µè ‚ãÉ·µè q s0) (sym $ fix-path (unfold·µè-body (unroll da))) ‚ü©
  Œµ·µè ‚ãÉ·µè lang·µè da s0
    ‚àé

acceptingInitial-nothing : (s0 : S) (da : DA A S)
                         ‚Üí lang (acceptingInitial s0 da) nothing Ôºù Œµ ‚ãÉ lang da s0
acceptingInitial-nothing s0 da = fun-ext Œª Œ∫ ‚Üí acceptingInitial-nothing·µè s0 da

starA-lemma·µè : (da : DA A S) (s0 : S) (ss : List (Maybe S))
             ‚Üí lang·µè {Œ∫ = Œ∫} (starA s0 da) ss Ôºù lang·µè (powA (acceptingInitial s0 da)) ss ¬∑·µè ((lang·µè da s0) Ôºä·µè)
starA-lemma·µè {A} {S} {Œ∫} da s0 = fix {k = Œ∫} Œª ih‚ñπ ss ‚Üí
  lang·µè (starA s0 da) ss
    Ôºù‚ü® ap (_$ ss) (fix-path (unfold·µè-body (unroll (starA s0 da)))) ‚ü©
  Mre·µè (ŒΩs (acceptingInitial s0 da) ss) (Œª a ‚Üí next (lang·µè (starA s0 da) (DA.Œ¥ (starA s0 da) ss a)))
    Ôºù‚ü® ap¬≤ Mre·µè (sym (and-id-r (ŒΩs (acceptingInitial s0 da) ss)))
                (fun-ext Œª a ‚Üí ‚ñπ-ext Œª Œ± ‚Üí go {ih‚ñπ = ih‚ñπ} {ss = ss}) ‚ü©
  ¬∑·µè-body (next _¬∑·µè_) (unfold·µè-body (unroll (powA (acceptingInitial s0 da))) (next (lang·µè (powA (acceptingInitial s0 da)))) ss)
                      (Ôºä·µè-body (next _Ôºä·µè) (unfold·µè-body (unroll da) (next (lang·µè da)) s0))
    Ôºù‚ü® ap (Œª q ‚Üí q (unfold·µè-body (unroll (powA (acceptingInitial s0 da))) (next (lang·µè (powA (acceptingInitial s0 da)))) ss)
                    (Ôºä·µè-body (next _Ôºä·µè) (unfold·µè-body (unroll da) (next (lang·µè da)) s0)))
           (sym $ fix-path ¬∑·µè-body) ‚ü©
  (unfold·µè-body (unroll (powA (acceptingInitial s0 da))) (next (lang·µè (powA (acceptingInitial s0 da)))) ss
     ¬∑·µè
   Ôºä·µè-body (next _Ôºä·µè) (unfold·µè-body (unroll da) (next (lang·µè da)) s0))
    Ôºù‚ü® ap (Œª q ‚Üí (q ss ¬∑·µè Ôºä·µè-body (next _Ôºä·µè) (unfold·µè-body (unroll da) (next (lang·µè da)) s0))) (sym $ fix-path (unfold·µè-body (unroll (powA (acceptingInitial s0 da))))) ‚ü©
  (lang·µè (powA (acceptingInitial s0 da)) ss ¬∑·µè Ôºä·µè-body (next _Ôºä·µè) (unfold·µè-body (unroll da) (next (lang·µè da)) s0))
    Ôºù‚ü® ap (Œª q ‚Üí (lang·µè (powA (acceptingInitial s0 da)) ss ¬∑·µè Ôºä·µè-body (next _Ôºä·µè) (q s0))) (sym $ fix-path (unfold·µè-body (unroll da))) ‚ü©
  (lang·µè (powA (acceptingInitial s0 da)) ss ¬∑·µè Ôºä·µè-body (next _Ôºä·µè) (lang·µè da s0))
    Ôºù‚ü® ap (Œª q ‚Üí lang·µè (powA (acceptingInitial s0 da)) ss ¬∑·µè q (lang·µè da s0)) (sym $ fix-path Ôºä·µè-body) ‚ü©
  lang·µè (powA (acceptingInitial s0 da)) ss ¬∑·µè ((lang·µè da s0) Ôºä·µè)
    ‚àé
  where
  go : {ih‚ñπ : ‚ñπ Œ∫ ((ss : List (Maybe S))
                  ‚Üí lang·µè {Œ∫ = Œ∫} (starA s0 da) ss Ôºù (lang·µè (powA (acceptingInitial s0 da)) ss ¬∑·µè (lang·µè da s0 Ôºä·µè)))}
       {ss : List (Maybe S)} {a : A} {@tick Œ± : Tick Œ∫}
       ‚Üí (lang·µè (starA s0 da) (DA.Œ¥ (starA s0 da) ss a))
           Ôºù
         (cond·µè (ŒΩs (acceptingInitial s0 da) ss)
          (next ((lang·µè (powA (acceptingInitial s0 da)) (Œ¥s (acceptingInitial s0 da) ss a))
                   ¬∑·µè
                 (Ôºä·µè-body (next _Ôºä·µè) (unfold·µè-body (unroll da) (next (lang·µè da)) s0))
                 ))
          (next ((lang·µè da (DA.Œ¥ da s0 a)) ¬∑·µè ((unfold·µè-body (unroll da) (next (lang·µè da)) s0) Ôºä·µè)))
          Œ±)
  go {ih‚ñπ} {ss} {a} {Œ±} with (ŒΩs (acceptingInitial s0 da) ss)
  ... | true  =
          lang·µè (starA s0 da) (just (DA.Œ¥ da s0 a) ‚à∑ Œ¥s (acceptingInitial s0 da) ss a)
            Ôºù‚ü® ih‚ñπ Œ± (just (DA.Œ¥ da s0 a) ‚à∑ Œ¥s (acceptingInitial s0 da) ss a) ‚ü©
          ((‚åú lang·µè (powA (acceptingInitial s0 da)) (just (DA.Œ¥ da s0 a) ‚à∑ Œ¥s (acceptingInitial s0 da) ss a) ‚åù ¬∑·µè (lang·µè da s0 Ôºä·µè)))
            Ôºù‚ü® ap! (powA-cons·µè (acceptingInitial s0 da) (just (DA.Œ¥ da s0 a)) (Œ¥s (acceptingInitial s0 da) ss a)) ‚ü©
          ((‚åú lang·µè (acceptingInitial s0 da) (just (DA.Œ¥ da s0 a)) ‚åù ‚ãÉ·µè lang·µè (powA (acceptingInitial s0 da)) (Œ¥s (acceptingInitial s0 da) ss a)) ¬∑·µè (lang·µè da s0 Ôºä·µè))
            Ôºù‚ü® ap! (acceptingInitial-just·µè s0 da (DA.Œ¥ da s0 a)) ‚ü©
          (‚åú lang·µè da (DA.Œ¥ da s0 a) ‚ãÉ·µè lang·µè (powA (acceptingInitial s0 da)) (Œ¥s (acceptingInitial s0 da) ss a) ‚åù ¬∑·µè (lang·µè da s0 Ôºä·µè))
            Ôºù‚ü® ap! (union·µè-comm {k = lang·µè da (DA.Œ¥ da s0 a)}) ‚ü©
          ((lang·µè (powA (acceptingInitial s0 da)) (Œ¥s (acceptingInitial s0 da) ss a) ‚ãÉ·µè lang·µè da (DA.Œ¥ da s0 a)) ¬∑·µè (lang·µè da s0 Ôºä·µè))
            Ôºù‚ü® ap (Œª q ‚Üí ((lang·µè (powA (acceptingInitial s0 da)) (Œ¥s (acceptingInitial s0 da) ss a) ‚ãÉ·µè lang·µè da (DA.Œ¥ da s0 a)) ¬∑·µè (q s0 Ôºä·µè))) (fix-path (unfold·µè-body (unroll da))) ‚ü©
          ((lang·µè (powA (acceptingInitial s0 da)) (Œ¥s (acceptingInitial s0 da) ss a) ‚ãÉ·µè lang·µè da (DA.Œ¥ da s0 a)) ¬∑·µè ((unfold·µè-body (unroll da) (next (lang·µè da)) s0) Ôºä·µè))
            Ôºù‚ü® concat-union-distrib-l·µè (lang·µè (powA (acceptingInitial s0 da)) (Œ¥s (acceptingInitial s0 da) ss a)) (lang·µè da (DA.Œ¥ da s0 a)) ((unfold·µè-body (unroll da) (next (lang·µè da)) s0) Ôºä·µè) ‚ü©
          ((lang·µè (powA (acceptingInitial s0 da)) (Œ¥s (acceptingInitial s0 da) ss a)
                   ¬∑·µè
           (unfold·µè-body (unroll da) (next (lang·µè da)) s0 Ôºä·µè))
             ‚ãÉ·µè
           (lang·µè da (DA.Œ¥ da s0 a) ¬∑·µè (unfold·µè-body (unroll da) (next (lang·µè da)) s0 Ôºä·µè)))
            Ôºù‚ü® ap (Œª q ‚Üí ((lang·µè (powA (acceptingInitial s0 da)) (Œ¥s (acceptingInitial s0 da) ss a)
                            ¬∑·µè (q (unfold·µè-body (unroll da) (next (lang·µè da)) s0)))
                           ‚ãÉ·µè
                          (lang·µè da (DA.Œ¥ da s0 a) ¬∑·µè (unfold·µè-body (unroll da) (next (lang·µè da)) s0 Ôºä·µè)))) (fix-path Ôºä·µè-body) ‚ü©
          ((lang·µè (powA (acceptingInitial s0 da)) (Œ¥s (acceptingInitial s0 da) ss a))
                   ¬∑·µè
           (Ôºä·µè-body (next _Ôºä·µè) (unfold·µè-body (unroll da) (next (lang·µè da)) s0)))
             ‚ãÉ·µè
          (lang·µè da (DA.Œ¥ da s0 a) ¬∑·µè ((unfold·µè-body (unroll da) (next (lang·µè da)) s0) Ôºä·µè))
            ‚àé
  ... | false =
          lang·µè (starA s0 da) (Œ¥s (acceptingInitial s0 da) ss a)
            Ôºù‚ü® ih‚ñπ Œ± (Œ¥s (acceptingInitial s0 da) ss a) ‚ü©
          (lang·µè (powA (acceptingInitial s0 da)) (Œ¥s (acceptingInitial s0 da) ss a) ¬∑·µè (lang·µè da s0 Ôºä·µè))
            Ôºù‚ü® ap (lang·µè (powA (acceptingInitial s0 da)) (Œ¥s (acceptingInitial s0 da) ss a) ¬∑·µè_)
                 (  ap (Œª q ‚Üí q s0 Ôºä·µè) (fix-path (unfold·µè-body (unroll da)))
                  ‚àô ap (Œª q ‚Üí q (unfold·µè-body (unroll da) (next (lang·µè da)) s0)) (fix-path Ôºä·µè-body)) ‚ü©
          (lang·µè (powA (acceptingInitial s0 da)) (Œ¥s (acceptingInitial s0 da) ss a) ¬∑·µè
           (Ôºä·µè-body (next _Ôºä·µè) (unfold·µè-body (unroll da) (next (lang·µè da)) s0)))
            ‚àé

starA-lemma : (da : DA A S) (s0 : S) (ss : List (Maybe S))
            ‚Üí lang (starA s0 da) ss Ôºù lang (powA (acceptingInitial s0 da)) ss ¬∑ (lang da s0 Ôºä)
starA-lemma da s0 ss = fun-ext Œª Œ∫ ‚Üí starA-lemma·µè da s0 ss

starA-correct·µè : (da : DA A S) (s0 : S)
               ‚Üí lang·µè {Œ∫ = Œ∫} (starA s0 da) (nothing ‚à∑ []) Ôºù (lang·µè da s0 Ôºä·µè)
starA-correct·µè da s0 =
  lang·µè (starA s0 da) (nothing ‚à∑ [])
    Ôºù‚ü® starA-lemma·µè da s0 (nothing ‚à∑ []) ‚ü©
  (‚åú lang·µè (powA (acceptingInitial s0 da)) (nothing ‚à∑ []) ‚åù ¬∑·µè (lang·µè da s0 Ôºä·µè))
    Ôºù‚ü® ap! (powA-cons·µè (acceptingInitial s0 da) nothing []) ‚ü©
  (‚åú lang·µè (acceptingInitial s0 da) nothing ‚åù ‚ãÉ·µè lang·µè (powA (acceptingInitial s0 da)) []) ¬∑·µè (lang·µè da s0 Ôºä·µè)
    Ôºù‚ü® ap! (acceptingInitial-nothing·µè s0 da) ‚ü©
  ((Œµ·µè ‚ãÉ·µè lang·µè da s0) ‚ãÉ·µè ‚åú lang·µè (powA (acceptingInitial s0 da)) [] ‚åù) ¬∑·µè (lang·µè da s0 Ôºä·µè)
    Ôºù‚ü® ap! (powA-nil·µè (acceptingInitial s0 da)) ‚ü©
  ‚åú (Œµ·µè ‚ãÉ·µè lang·µè da s0) ‚ãÉ·µè ‚àÖ·µè ‚åù ¬∑·µè (lang·µè da s0 Ôºä·µè)
    Ôºù‚ü® ap! union-empty-r·µè ‚ü©
  (Œµ·µè ‚ãÉ·µè lang·µè da s0) ¬∑·µè (lang·µè da s0 Ôºä·µè)
    Ôºù‚ü® concat-union-distrib-l·µè Œµ·µè (lang·µè da s0) (lang·µè da s0 Ôºä·µè) ‚ü©
  (‚åú Œµ·µè ¬∑·µè (lang·µè da s0 Ôºä·µè) ‚åù ‚ãÉ·µè (lang·µè da s0 ¬∑·µè (lang·µè da s0 Ôºä·µè)))
    Ôºù‚ü® ap! (concat-unit-l·µè (lang·µè da s0 Ôºä·µè)) ‚ü©
  (lang·µè da s0 Ôºä·µè) ‚ãÉ·µè (lang·µè da s0 ¬∑·µè (lang·µè da s0 Ôºä·µè))
    Ôºù‚ü® {!!} ‚ü©
  (lang·µè da s0 Ôºä·µè)
    ‚àé
