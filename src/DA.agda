{-# OPTIONS --guarded #-}
module DA where

import Prelude as P hiding (Tactic-bishop-finite ; ordโis-discrete)
open P
open import Data.Unit
open import Data.Bool hiding (_โ_)
open import Data.Dec
open import Data.List

open import Later
open import Clocked.Moore
open import Lang

private variable
  โ : Level
  A S : ๐ฐ โ
  ฮบ : Cl

record DA (A : ๐ฐ โ) (S : ๐ฐ โ) : ๐ฐ โ where
  constructor mkDA
  field ฮฝ : (s : S) โ Bool
        ฮด : (s : S) (a : A) โ S

ฮฝs : DA A S โ List S โ Bool
ฮฝs da = any (DA.ฮฝ da)

ฮดs : DA A S โ List S โ A โ List S
ฮดs da ss a = map (ฮป s โ DA.ฮด da s a) ss

langแต-body : DA A S โ โน ฮบ (S โ gLang ฮบ A) โ S โ gLang ฮบ A
langแต-body da lโน s = Mreแต (DA.ฮฝ da s) ฮป a โ lโน โ next (DA.ฮด da s a)

langแต : DA A S โ S โ gLang ฮบ A
langแต {ฮบ} da = fix {k = ฮบ} (langแต-body da)

lang : DA A S โ S โ Lang A
lang da s ฮบ = langแต da s

-- constructions

โA : DA A โค
โA = mkDA (ฮป _ โ false) ฮป _ _ โ tt

ฮตA : DA A Bool
ฮตA = mkDA id ฮป _ _ โ false

data ST3 : ๐ฐ where
  init acc err : ST3

charA : โฆ dA : is-discrete A โฆ
      โ A โ DA A ST3
charA {A} a = mkDA cฮฝ cฮด
  where
  cฮฝ : ST3 โ Bool
  cฮฝ init = false
  cฮฝ acc = true
  cฮฝ err = false
  cฮด : ST3 โ A โ ST3
  cฮด init x = if โ x โ a โ then acc else err
  cฮด acc  x = err
  cฮด err  x = err

complA : DA A S โ DA A S
complA da = mkDA (not โ DA.ฮฝ da) (DA.ฮด da)

-- product automaton
_โ_ : โ {Sโ Sโ : ๐ฐ โ}
     โ DA A Sโ โ DA A Sโ โ DA A (Sโ ร Sโ)
da1 โ da2 = mkDA (ฮป s โ DA.ฮฝ da1 (s .fst) or DA.ฮฝ da2 (s .snd))
                  ฮป s a โ (DA.ฮด da1 (s. fst) a) , (DA.ฮด da2 (s. snd) a)

-- power automaton
powA : DA A S โ DA A (List S)
powA da = mkDA (ฮฝs da) (ฮดs da)

powA-nilแต : (da : DA A S) โ langแต {ฮบ = ฮบ} (powA da) [] ๏ผ โแต
powA-nilแต {ฮบ} da = fix {k = ฮบ} ฮป ihโน โ
  langแต (powA da) []
    ๏ผโจ ap (_$ []) (fix-path (langแต-body (powA da))) โฉ
  langแต-body (powA da) (next (langแต (powA da))) []
    ๏ผโจ ap (Mreแต false) (fun-ext ฮป _ โ โน-ext ihโน) โฉ
  pureแต-body false (next โแต)
    ๏ผหโจ fix-path (pureแต-body false) โฉ
  โแต
    โ

powA-nil : (da : DA A S) โ lang (powA da) [] ๏ผ โ
powA-nil da = fun-ext ฮป ฮบ โ powA-nilแต da

powA-consแต : (da : DA A S) (s : S) (ss : List S)
           โ langแต {ฮบ = ฮบ} (powA da) (s โท ss) ๏ผ langแต da s โแต langแต (powA da) ss
powA-consแต {ฮบ} da = fix {k = ฮบ} ฮป ihโน s ss โ
  langแต (powA da) (s โท ss)
    ๏ผโจ ap (_$ s โท ss) (fix-path (langแต-body (powA da))) โฉ
  langแต-body (powA da) (next (langแต (powA da))) (s โท ss)
    ๏ผโจ apยฒ Mreแต refl (fun-ext ฮป a โ โน-ext (ihโน โ next (DA.ฮด da s a) โ next (map (ฮป sโฒ โ DA.ฮด da sโฒ a) ss))) โฉ
  apแต-body (next apแต) (mapแต-body _or_ (next (mapแต _or_)) (langแต-body da (next (langแต da)) s)) (langแต-body (powA da) (next (langแต (powA da))) ss)
    ๏ผหโจ zipWithแต-eq {f = _or_} {b = langแต-body da (next (langแต da)) s} โฉ
  (langแต-body da (next (langแต da)) s โแต langแต-body (powA da) (next (langแต (powA da))) ss)
    ๏ผหโจ ap (ฮป q โ langแต-body da (next (langแต da)) s โแต q ss) (fix-path (langแต-body (powA da))) โฉ
  (langแต-body da (next (langแต da)) s โแต langแต (powA da) ss)
    ๏ผหโจ ap (ฮป q โ q s โแต langแต (powA da) ss) (fix-path (langแต-body da)) โฉ
  langแต da s โแต langแต (powA da) ss
    โ

powA-cons : (da : DA A S) (s : S) (ss : List S)
          โ lang (powA da) (s โท ss) ๏ผ lang da s โ lang (powA da) ss
powA-cons da s ss = fun-ext ฮป ฮบ โ powA-consแต da s ss

-- composition automaton
composeA : โ {Sโ Sโ : ๐ฐ โ}
         โ DA A Sโ โ Sโ โ DA A Sโ โ DA A (Sโ ร List Sโ)
composeA da1 s da2 =
  mkDA (ฮป s12 โ DA.ฮฝ da1 (s12 .fst) and DA.ฮฝ da2 s or ฮฝs da2 (s12 .snd))
       (ฮป s12 a โ (  DA.ฮด da1 (s12 .fst) a)
                   , ฮดs da2 (if DA.ฮฝ da1 (s12 .fst) then s โท s12 .snd else s12 .snd) a)
