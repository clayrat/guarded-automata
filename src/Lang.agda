{-# OPTIONS --guarded #-}
module Lang where

open import Prelude
open import Data.Bool
open import Data.Dec
open import Data.List

open import Later
open import Clocked.Moore

private variable
  โ : Level
  A : ๐ฐ โ
  ฮบ : Cl

gLang : Cl โ ๐ฐ โ โ ๐ฐ โ
gLang k A = gMoore k A Bool

Lang : ๐ฐ โ โ ๐ฐ โ
Lang A = Moore A Bool

-- TODO Clocked.Moore.Run
_โ_ : Lang A โ List A โ Bool
l โ []       = ฮฝแต l
l โ (a โท as) = ฮดแต l a โ as

trie : (List A โ Bool) โ Lang A
trie = unfoldListแต

โ : Lang A
โ = pureแต false

ฮต : Lang A
ฮต = Mre true ฮป _ โ โ

-- TODO how to use instances?
char : โ {dA : is-discrete A}
     โ A โ Lang A
char {dA} a = Mre false ฮป x โ if โ is-discrete-ฮฒ dA x a โ then ฮต else โ

compl : Lang A โ Lang A
compl = mapแต not

_โแต_ : gLang ฮบ A โ gLang ฮบ A โ gLang ฮบ A
_โแต_ = zipWithแต _or_

_โ_ : Lang A โ Lang A โ Lang A
_โ_ = zipWithแต _or_

_โ_ : Lang A โ Lang A โ Lang A
_โ_ = zipWithแต _and_

-- TODO figure out combinators
ยทแต-body : โน ฮบ (gLang ฮบ A โ gLang ฮบ A โ gLang ฮบ A)
            โ gLang ฮบ A โ gLang ฮบ A โ gLang ฮบ A
ยทแต-body cโน (Mreแต kแต kแต) l@(Mreแต lแต lแต) =
  Mreแต (kแต and lแต) ฮป a โ let klโฒ = cโน โ kแต a โ next l in
                         if kแต then โนmap _โแต_ klโฒ โ lแต a else klโฒ

_ยทแต_ : gMoore ฮบ A Bool โ gLang ฮบ A โ gLang ฮบ A
_ยทแต_ = fix ยทแต-body

_ยท_ : Lang A โ Lang A โ Lang A
_ยท_ a b k = (a k) ยทแต (b k)

starแต-body : โน ฮบ (gLang ฮบ A โ gLang ฮบ A)
            โ gLang ฮบ A โ gLang ฮบ A
starแต-body sโน l@(Mreแต _ k) = Mreแต true ฮป a โ โนmap (_ยทแต_) (k a) โ (sโน โ next l)

starแต : gLang ฮบ A โ gLang ฮบ A
starแต = fix starแต-body

_๏ผ : Lang A โ Lang A
_๏ผ l ฮบ = starแต (l ฮบ)

-- laws

unionแต-assoc : {k l m : gLang ฮบ A}
             โ (k โแต l) โแต m ๏ผ k โแต (l โแต m)
unionแต-assoc = zipWithแต-assoc or-assoc

union-assoc : {k l m : Lang A}
            โ (k โ l) โ m ๏ผ k โ (l โ m)
union-assoc = zipWithแต-assoc or-assoc

inter-assoc : {k l m : Lang A}
            โ (k โ l) โ m ๏ผ k โ (l โ m)
inter-assoc = zipWithแต-assoc and-assoc

unionแต-comm : {k l : gLang ฮบ A}
            โ k โแต l ๏ผ l โแต k
unionแต-comm {k} {l} = zipWithแต-comm or-comm k l

union-comm : {k l : Lang A}
           โ k โ l ๏ผ l โ k
union-comm {k} {l} = zipWithแต-comm or-comm k l

inter-comm : {k l : Lang A}
           โ k โ l ๏ผ l โ k
inter-comm {k} {l} = zipWithแต-comm and-comm k l

unionแต-idem : {l : gLang ฮบ A}
            โ l โแต l ๏ผ l
unionแต-idem {l} = zipWithแต-idem or-idem l

union-idem : {l : Lang A}
           โ l โ l ๏ผ l
union-idem {l} = zipWithแต-idem or-idem l

inter-idem : {l : Lang A}
           โ l โ l ๏ผ l
inter-idem {l} = zipWithแต-idem and-idem l

union-empty-l : {l : Lang A}
              โ โ โ l ๏ผ l
union-empty-l {l} = zipWithแต-id-l ฮป _ โ refl

-- TODO we don't have an ICM solver in c-m yet

union-unionแต-distr : {k l m : gLang ฮบ A}
                  โ (k โแต l) โแต m ๏ผ (k โแต m) โแต (l โแต m)
union-unionแต-distr {k} {l} {m} =
  (k โแต l) โแต m
    ๏ผโจ unionแต-assoc โฉ
  (k โแต (l โแต m))
    ๏ผโจ ap (ฮป q โ k โแต (l โแต q)) (sym unionแต-idem) โฉ
  (k โแต (l โแต (m โแต m)))
    ๏ผโจ ap (ฮป q โ k โแต q) (sym unionแต-assoc) โฉ
  (k โแต ((l โแต m) โแต m))
    ๏ผโจ ap (ฮป q โ k โแต q) unionแต-comm โฉ
  (k โแต (m โแต (l โแต m)))
    ๏ผโจ sym unionแต-assoc โฉ
  (k โแต m) โแต (l โแต m)
    โ

union-union-distr : {k l m : Lang A}
                  โ (k โ l) โ m ๏ผ (k โ m) โ (l โ m)
union-union-distr {k} {l} {m} =
  (k โ l) โ m
    ๏ผโจ union-assoc โฉ
  (k โ (l โ m))
    ๏ผโจ ap (ฮป q โ k โ (l โ q)) (sym union-idem) โฉ
  (k โ (l โ (m โ m)))
    ๏ผโจ ap (ฮป q โ k โ q) (sym union-assoc) โฉ
  (k โ ((l โ m) โ m))
    ๏ผโจ ap (ฮป q โ k โ q) union-comm โฉ
  (k โ (m โ (l โ m)))
    ๏ผโจ sym union-assoc โฉ
  (k โ m) โ (l โ m)
    โ

concat-union-distrib-lแต : (k l m : gLang ฮบ A)
                        โ (k โแต l) ยทแต m ๏ผ (k ยทแต m) โแต (l ยทแต m)
concat-union-distrib-lแต {ฮบ} = fix {k = ฮบ} ฮป ihโน โ ฮป where
  k@(Mreแต kแต kแต) l@(Mreแต lแต lแต) m@(Mreแต mแต mแต) โ
    ((k โแต l) ยทแต m)
      ๏ผโจ ap (ฮป q โ q ยทแต m) (zipWithแต-eq {f = _or_} {b = k} {c = l})  โฉ
    (apแต-body (next apแต) (mapแต-body _or_ (next (mapแต _or_)) k) l ยทแต m)
      ๏ผโจ ap (ฮป q โ q (apแต-body (next apแต) (mapแต-body _or_ (next (mapแต _or_)) k) l) m) (fix-path ยทแต-body) โฉ
    ยทแต-body (next _ยทแต_) (apแต-body (next apแต) (mapแต-body _or_ (next (mapแต _or_)) k) l) m
      ๏ผโจ apยฒ Mreแต (and-distrib-or-r kแต lแต mแต) (fun-ext ฮป a โ โน-ext (go {ihโน = ihโน} {kแต} {kแต} {lแต} {lแต} {mแต} {mแต})) โฉ
    apแต-body (next apแต) (mapแต-body _or_ (next (mapแต _or_)) (ยทแต-body (next _ยทแต_) k m)) (ยทแต-body (next _ยทแต_) l m)
      ๏ผโจ ap (ฮป q โ apแต-body (next apแต) (mapแต-body _or_ (next (mapแต _or_)) (ยทแต-body (next _ยทแต_) k m)) (q l m)) (sym $ fix-path ยทแต-body) โฉ
    apแต-body (next apแต) (mapแต-body _or_ (next (mapแต _or_)) (ยทแต-body (next _ยทแต_) k m)) (l ยทแต m)
      ๏ผโจ ap (ฮป q โ apแต-body (next apแต) (mapแต-body _or_ (next (mapแต _or_)) (q k m)) (l ยทแต m)) (sym $ fix-path ยทแต-body)  โฉ
    apแต-body (next apแต) (mapแต-body _or_ (next (mapแต _or_)) (k ยทแต m)) (l ยทแต m)
      ๏ผโจ sym (zipWithแต-eq {f = _or_} {b = k ยทแต m} {c = l ยทแต m}) โฉ
    ((k ยทแต m) โแต (l ยทแต m))
      โ
   where
   go : {ihโน : โน ฮบ ((k l m : gLang ฮบ A) โ ((k โแต l) ยทแต m) ๏ผ ((k ยทแต m) โแต (l ยทแต m)))}
        {kแต : Bool} {kแต : A โ โน ฮบ (gLang ฮบ A)}
        {lแต : Bool} {lแต : A โ โน ฮบ (gLang ฮบ A)}
        {mแต : Bool} {mแต : A โ โน ฮบ (gLang ฮบ A)}
        {a : A}
      โ โน[ ฮฑ โถ ฮบ ] ((if kแต or lแต then โนmap _โแต_ (next _ยทแต_ โ (next apแต โ (next (mapแต _or_) โ kแต a) โ lแต a) โ next (Mreแต mแต mแต)) โ mแต a
                                else next _ยทแต_ โ (next apแต โ (next (mapแต _or_) โ kแต a) โ lแต a) โ next (Mreแต mแต mแต)) ฮฑ)
                   ๏ผ
                  ((next apแต โ (next (mapแต _or_) โ (if kแต then โนmap _โแต_ (next _ยทแต_ โ kแต a โ next (Mreแต mแต mแต)) โ mแต a
                                                           else next _ยทแต_ โ kแต a โ next (Mreแต mแต mแต)))
                             โ (if lแต then โนmap _โแต_ (next _ยทแต_ โ lแต a โ next (Mreแต mแต mแต)) โ mแต a
                                       else next _ยทแต_ โ lแต a โ next (Mreแต mแต mแต))) ฮฑ)
   go {ihโน} {kแต = false} {kแต} {lแต = false} {lแต} {mแต} {mแต} {a} = ihโน โ kแต a โโฒ lแต a โโฒ next (Mreแต mแต mแต)
   go {ihโน} {kแต = false} {kแต} {lแต = true}  {lแต} {mแต} {mแต} {a} = ฮป ฮฑ โ ap (ฮป q โ q โแต (mแต a ฮฑ)) ((ihโน โ kแต a โโฒ lแต a โโฒ next (Mreแต mแต mแต)) ฮฑ) โ unionแต-assoc
   go {ihโน} {kแต = true}  {kแต} {lแต = false} {lแต} {mแต} {mแต} {a} = ฮป ฮฑ โ ap (ฮป q โ q โแต (mแต a ฮฑ)) ((ihโน โ kแต a โโฒ lแต a โโฒ next (Mreแต mแต mแต)) ฮฑ) โ unionแต-assoc โ ap (ฮป q โ ((kแต a ฮฑ) ยทแต (Mreแต mแต mแต)) โแต q) unionแต-comm โ sym unionแต-assoc
   go {ihโน} {kแต = true}  {kแต} {lแต = true}  {lแต} {mแต} {mแต} {a} = ฮป ฮฑ โ ap (ฮป q โ q โแต (mแต a ฮฑ)) ((ihโน โ kแต a โโฒ lแต a โโฒ next (Mreแต mแต mแต)) ฮฑ) โ union-unionแต-distr

concat-union-distrib-l : (k l m : Lang A)
                       โ (k โ l) ยท m ๏ผ (k ยท m) โ (l ยท m)
concat-union-distrib-l k l m = fun-ext ฮป ฮบ โ concat-union-distrib-lแต (k ฮบ) (l ฮบ) (m ฮบ)
