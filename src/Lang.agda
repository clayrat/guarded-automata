{-# OPTIONS --guarded #-}
module Lang where

import Prelude as P hiding (Tactic-bishop-finite ; ordРєњis-discrete)
open P
open import Data.Empty
open import Data.Bool
open import Data.Dec
open import Data.List

open import Later
open import ClIrr
open import Clocked.Moore

private variable
  РёЊ : Level
  A : ­Юњ░ РёЊ
  ╬║ : Cl

gLang : Cl Рєњ ­Юњ░ РёЊ Рєњ ­Юњ░ РёЊ
gLang k A = gMoore k A Bool

Lang : ­Юњ░ РёЊ Рєњ ­Юњ░ РёЊ
Lang A = Moore A Bool

-- TODO Clocked.Moore.Run
_РѕІ_ : Lang A Рєњ List A Рєњ Bool
l РѕІ []       = ╬йрхљ l
l РѕІ (a Рѕи as) = ╬┤рхљ l a РѕІ as

trie : (List A Рєњ Bool) Рєњ Lang A
trie = unfoldListрхљ

РѕЁрхЈ : gLang ╬║ A
РѕЁрхЈ = pureрхЈ false

РѕЁ : Lang A
РѕЁ = pureрхљ false

╬хрхЈ : gLang ╬║ A
╬хрхЈ = MreрхЈ true ╬╗ _ Рєњ next РѕЁрхЈ

╬х : Lang A
╬х = Mre true ╬╗ _ Рєњ РѕЁ

char : РдЃ dA : is-discrete A Рдё
     Рєњ A Рєњ Lang A
char a = Mre false ╬╗ x Рєњ if Рїі x РЅЪ a РїІ then ╬х else РѕЁ

compl : Lang A Рєњ Lang A
compl = mapрхљ not

_РІЃрхЈ_ : gLang ╬║ A Рєњ gLang ╬║ A Рєњ gLang ╬║ A
_РІЃрхЈ_ = zipWithрхЈ _or_

_РІЃ_ : Lang A Рєњ Lang A Рєњ Lang A
_РІЃ_ = zipWithрхљ _or_

_РІѓ_ : Lang A Рєњ Lang A Рєњ Lang A
_РІѓ_ = zipWithрхљ _and_

-- TODO figure out better combinators?
condрхЈ : Bool Рєњ Рќ╣ ╬║ (gLang ╬║ A) Рєњ Рќ╣ ╬║ (gLang ╬║ A) Рєњ Рќ╣ ╬║ (gLang ╬║ A)
condрхЈ b k l = if b then Рќ╣map _РІЃрхЈ_ k РіЏ l else k

┬ирхЈ-body : Рќ╣ ╬║ (gLang ╬║ A Рєњ gLang ╬║ A Рєњ gLang ╬║ A)
            Рєњ gLang ╬║ A Рєњ gLang ╬║ A Рєњ gLang ╬║ A
┬ирхЈ-body cРќ╣ (MreрхЈ kрхЄ kрхЈ) l@(MreрхЈ lрхЄ lрхЈ) =
  MreрхЈ (kрхЄ and lрхЄ) ╬╗ a Рєњ condрхЈ kрхЄ (cРќ╣ РіЏ kрхЈ a РіЏ next l) (lрхЈ a)

_┬ирхЈ_ : gMoore ╬║ A Bool Рєњ gLang ╬║ A Рєњ gLang ╬║ A
_┬ирхЈ_ = fix ┬ирхЈ-body

_┬и_ : Lang A Рєњ Lang A Рєњ Lang A
_┬и_ a b k = (a k) ┬ирхЈ (b k)

№╝ірхЈ-body : Рќ╣ ╬║ (gLang ╬║ A Рєњ gLang ╬║ A)
            Рєњ gLang ╬║ A Рєњ gLang ╬║ A
№╝ірхЈ-body sРќ╣ l@(MreрхЈ _ k) = MreрхЈ true ╬╗ a Рєњ Рќ╣map (_┬ирхЈ_) (k a) РіЏ (sРќ╣ РіЏ next l)

_№╝ірхЈ : gLang ╬║ A Рєњ gLang ╬║ A
_№╝ірхЈ = fix №╝ірхЈ-body

_№╝і : Lang A Рєњ Lang A
_№╝і l ╬║ = (l ╬║) №╝ірхЈ

-- laws

unionрхЈ-assoc : {k l m : gLang ╬║ A}
             Рєњ (k РІЃрхЈ l) РІЃрхЈ m №╝Ю k РІЃрхЈ (l РІЃрхЈ m)
unionрхЈ-assoc = zipWithрхЈ-assoc or-assoc

union-assoc : {k l m : Lang A}
            Рєњ (k РІЃ l) РІЃ m №╝Ю k РІЃ (l РІЃ m)
union-assoc = zipWithрхљ-assoc or-assoc

inter-assoc : {k l m : Lang A}
            Рєњ (k РІѓ l) РІѓ m №╝Ю k РІѓ (l РІѓ m)
inter-assoc = zipWithрхљ-assoc and-assoc

unionрхЈ-comm : {k l : gLang ╬║ A}
            Рєњ k РІЃрхЈ l №╝Ю l РІЃрхЈ k
unionрхЈ-comm {k} {l} = zipWithрхЈ-comm or-comm k l

union-comm : {k l : Lang A}
           Рєњ k РІЃ l №╝Ю l РІЃ k
union-comm {k} {l} = zipWithрхљ-comm or-comm k l

inter-comm : {k l : Lang A}
           Рєњ k РІѓ l №╝Ю l РІѓ k
inter-comm {k} {l} = zipWithрхљ-comm and-comm k l

unionрхЈ-idem : {l : gLang ╬║ A}
            Рєњ l РІЃрхЈ l №╝Ю l
unionрхЈ-idem {l} = zipWithрхЈ-idem or-idem l

union-idem : {l : Lang A}
           Рєњ l РІЃ l №╝Ю l
union-idem {l} = zipWithрхљ-idem or-idem l

inter-idem : {l : Lang A}
           Рєњ l РІѓ l №╝Ю l
inter-idem {l} = zipWithрхљ-idem and-idem l

union-empty-lрхЈ : {l : gLang ╬║ A}
               Рєњ РѕЁрхЈ РІЃрхЈ l №╝Ю l
union-empty-lрхЈ {l} = zipWithрхЈ-id-l ╬╗ _ Рєњ refl

union-empty-l : {l : Lang A}
              Рєњ РѕЁ РІЃ l №╝Ю l
union-empty-l {l} = zipWithрхљ-id-l ╬╗ _ Рєњ refl

-- derived laws
-- TODO we don't have an ICM solver in c-m yet

union-empty-rрхЈ : {l : gLang ╬║ A}
               Рєњ l РІЃрхЈ РѕЁрхЈ №╝Ю l
union-empty-rрхЈ {l} = unionрхЈ-comm РѕЎ union-empty-lрхЈ

union-empty-r : {l : Lang A}
               Рєњ l РІЃ РѕЁ №╝Ю l
union-empty-r {l} = union-comm РѕЎ union-empty-l

union-assoc-commрхЈ : {k l m : gLang ╬║ A}
                  Рєњ (k РІЃрхЈ l) РІЃрхЈ m №╝Ю (k РІЃрхЈ m) РІЃрхЈ l
union-assoc-commрхЈ {k} = unionрхЈ-assoc РѕЎ ap (╬╗ q Рєњ k РІЃрхЈ q) unionрхЈ-comm РѕЎ sym unionрхЈ-assoc

union-unionрхЈ-distr : {k l m : gLang ╬║ A}
                  Рєњ (k РІЃрхЈ l) РІЃрхЈ m №╝Ю (k РІЃрхЈ m) РІЃрхЈ (l РІЃрхЈ m)
union-unionрхЈ-distr {k} {l} {m} =
  (k РІЃрхЈ l) РІЃрхЈ m
    №╝ЮРЪе unionрхЈ-assoc РЪЕ
  (k РІЃрхЈ (l РІЃрхЈ Рїю m РїЮ))
    №╝Ю╦ўРЪе ap┬А unionрхЈ-idem РЪЕ
  (k РІЃрхЈ Рїю l РІЃрхЈ (m РІЃрхЈ m) РїЮ)
    №╝Ю╦ўРЪе ap┬А unionрхЈ-assoc РЪЕ
  (k РІЃрхЈ Рїю (l РІЃрхЈ m) РІЃрхЈ m РїЮ)
    №╝ЮРЪе ap! unionрхЈ-comm РЪЕ
  (k РІЃрхЈ (m РІЃрхЈ (l РІЃрхЈ m)))
    №╝Ю╦ўРЪе unionрхЈ-assoc РЪЕ
  (k РІЃрхЈ m) РІЃрхЈ (l РІЃрхЈ m)
    Рѕј

unionрхЈ-swap-inner : {k l m n : gLang ╬║ A}
                  Рєњ (k РІЃрхЈ l) РІЃрхЈ (m РІЃрхЈ n) №╝Ю (k РІЃрхЈ m) РІЃрхЈ (l РІЃрхЈ n)
unionрхЈ-swap-inner {k} {l} {m} {n} =
  (k РІЃрхЈ l) РІЃрхЈ (m РІЃрхЈ n)
    №╝ЮРЪе unionрхЈ-assoc РЪЕ
  (k РІЃрхЈ Рїю l РІЃрхЈ (m РІЃрхЈ n) РїЮ)
    №╝Ю╦ўРЪе ap┬А unionрхЈ-assoc РЪЕ
  (k РІЃрхЈ (Рїю l РІЃрхЈ m РїЮ РІЃрхЈ n))
    №╝ЮРЪе ap! unionрхЈ-comm РЪЕ
  (k РІЃрхЈ Рїю (m РІЃрхЈ l) РІЃрхЈ n РїЮ)
    №╝ЮРЪе ap! unionрхЈ-assoc РЪЕ
  (k РІЃрхЈ (m РІЃрхЈ (l РІЃрхЈ n)))
    №╝Ю╦ўРЪе unionрхЈ-assoc РЪЕ
  (k РІЃрхЈ m) РІЃрхЈ (l РІЃрхЈ n)
    Рѕј

-- concatenation laws

concat-union-distrib-lрхЈ : (k l m : gLang ╬║ A)
                        Рєњ (k РІЃрхЈ l) ┬ирхЈ m №╝Ю (k ┬ирхЈ m) РІЃрхЈ (l ┬ирхЈ m)
concat-union-distrib-lрхЈ {╬║} = fix {k = ╬║} ╬╗ ihРќ╣ Рєњ ╬╗ where
  k@(MreрхЈ kрхЄ kрхЈ) l@(MreрхЈ lрхЄ lрхЈ) m@(MreрхЈ mрхЄ mрхЈ) Рєњ
    (Рїю k РІЃрхЈ l РїЮ ┬ирхЈ m)
      №╝ЮРЪе ap! (zipWithрхЈ-eq {f = _or_} {b = k} {c = l}) РЪЕ
    (apрхЈ-body (next apрхЈ) (mapрхЈ-body _or_ (next (mapрхЈ _or_)) k) l ┬ирхЈ m)
      №╝ЮРЪе ap (╬╗ q Рєњ q (apрхЈ-body (next apрхЈ) (mapрхЈ-body _or_ (next (mapрхЈ _or_)) k) l) m) (fix-path ┬ирхЈ-body) РЪЕ
    ┬ирхЈ-body (next _┬ирхЈ_) (apрхЈ-body (next apрхЈ) (mapрхЈ-body _or_ (next (mapрхЈ _or_)) k) l) m
      №╝ЮРЪе ap┬▓ MreрхЈ (and-distrib-or-r kрхЄ lрхЄ mрхЄ) (fun-ext ╬╗ a Рєњ Рќ╣-ext (go {ihРќ╣ = ihРќ╣} {kрхЄ} {kрхЈ} {lрхЄ} {lрхЈ} {mрхЄ} {mрхЈ})) РЪЕ
    apрхЈ-body (next apрхЈ) (mapрхЈ-body _or_ (next (mapрхЈ _or_)) (┬ирхЈ-body (next _┬ирхЈ_) k m)) (┬ирхЈ-body (next _┬ирхЈ_) l m)
      №╝ЮРЪе ap (╬╗ q Рєњ apрхЈ-body (next apрхЈ) (mapрхЈ-body _or_ (next (mapрхЈ _or_)) (┬ирхЈ-body (next _┬ирхЈ_) k m)) (q l m)) (sym $ fix-path ┬ирхЈ-body) РЪЕ
    apрхЈ-body (next apрхЈ) (mapрхЈ-body _or_ (next (mapрхЈ _or_)) (┬ирхЈ-body (next _┬ирхЈ_) k m)) (l ┬ирхЈ m)
      №╝ЮРЪе ap (╬╗ q Рєњ apрхЈ-body (next apрхЈ) (mapрхЈ-body _or_ (next (mapрхЈ _or_)) (q k m)) (l ┬ирхЈ m)) (sym $ fix-path ┬ирхЈ-body)  РЪЕ
    apрхЈ-body (next apрхЈ) (mapрхЈ-body _or_ (next (mapрхЈ _or_)) (k ┬ирхЈ m)) (l ┬ирхЈ m)
      №╝Ю╦ўРЪе zipWithрхЈ-eq {f = _or_} {b = k ┬ирхЈ m} {c = l ┬ирхЈ m} РЪЕ
    ((k ┬ирхЈ m) РІЃрхЈ (l ┬ирхЈ m))
      Рѕј
   where
   go : {ihРќ╣ : Рќ╣ ╬║ ((k l m : gLang ╬║ A) Рєњ ((k РІЃрхЈ l) ┬ирхЈ m) №╝Ю ((k ┬ирхЈ m) РІЃрхЈ (l ┬ирхЈ m)))}
        {kрхЄ : Bool} {kрхЈ : A Рєњ Рќ╣ ╬║ (gLang ╬║ A)}
        {lрхЄ : Bool} {lрхЈ : A Рєњ Рќ╣ ╬║ (gLang ╬║ A)}
        {mрхЄ : Bool} {mрхЈ : A Рєњ Рќ╣ ╬║ (gLang ╬║ A)}
        {a : A}
      Рєњ Рќ╣[ ╬▒ РѕХ ╬║ ] (condрхЈ (kрхЄ or lрхЄ) (Рќ╣map _┬ирхЈ_ (Рќ╣map _РІЃрхЈ_ (kрхЈ a) РіЏ lрхЈ a) РіЏ next (MreрхЈ mрхЄ mрхЈ)) (mрхЈ a) ╬▒)
                    №╝Ю
                  ((Рќ╣map _РІЃрхЈ_ (condрхЈ kрхЄ (Рќ╣map _┬ирхЈ_ (kрхЈ a) РіЏ next (MreрхЈ mрхЄ mрхЈ)) (mрхЈ a))
                             РіЏ condрхЈ lрхЄ (Рќ╣map _┬ирхЈ_ (lрхЈ a) РіЏ next (MreрхЈ mрхЄ mрхЈ)) (mрхЈ a)) ╬▒)
   go {ihРќ╣} {kрхЄ = false} {kрхЈ} {lрхЄ = false} {lрхЈ} {mрхЄ} {mрхЈ} {a} =
     ihРќ╣ РіЏ kрхЈ a РіЏРђ▓ lрхЈ a РіЏРђ▓ next (MreрхЈ mрхЄ mрхЈ)
   go {ihРќ╣} {kрхЄ = false} {kрхЈ} {lрхЄ = true}  {lрхЈ} {mрхЄ} {mрхЈ} {a} =
     ╬╗ ╬▒ Рєњ ap (╬╗ q Рєњ q РІЃрхЈ (mрхЈ a ╬▒)) ((ihРќ╣ РіЏ kрхЈ a РіЏРђ▓ lрхЈ a РіЏРђ▓ next (MreрхЈ mрхЄ mрхЈ)) ╬▒)
         РѕЎ unionрхЈ-assoc
   go {ihРќ╣} {kрхЄ = true}  {kрхЈ} {lрхЄ = false} {lрхЈ} {mрхЄ} {mрхЈ} {a} =
     ╬╗ ╬▒ Рєњ ap (╬╗ q Рєњ q РІЃрхЈ (mрхЈ a ╬▒)) ((ihРќ╣ РіЏ kрхЈ a РіЏРђ▓ lрхЈ a РіЏРђ▓ next (MreрхЈ mрхЄ mрхЈ)) ╬▒)
         РѕЎ union-assoc-commрхЈ
   go {ihРќ╣} {kрхЄ = true}  {kрхЈ} {lрхЄ = true}  {lрхЈ} {mрхЄ} {mрхЈ} {a} =
     ╬╗ ╬▒ Рєњ ap (╬╗ q Рєњ q РІЃрхЈ (mрхЈ a ╬▒)) ((ihРќ╣ РіЏ kрхЈ a РіЏРђ▓ lрхЈ a РіЏРђ▓ next (MreрхЈ mрхЄ mрхЈ)) ╬▒)
         РѕЎ union-unionрхЈ-distr

concat-union-distrib-l : (k l m : Lang A)
                       Рєњ (k РІЃ l) ┬и m №╝Ю (k ┬и m) РІЃ (l ┬и m)
concat-union-distrib-l k l m = fun-ext ╬╗ ╬║ Рєњ concat-union-distrib-lрхЈ (k ╬║) (l ╬║) (m ╬║)

concat-union-distrib-rрхЈ : (k l m : gLang ╬║ A)
                        Рєњ k ┬ирхЈ (l РІЃрхЈ m) №╝Ю (k ┬ирхЈ l) РІЃрхЈ (k ┬ирхЈ m)
concat-union-distrib-rрхЈ {╬║} = fix {k = ╬║} ╬╗ ihРќ╣ Рєњ ╬╗ where
  k@(MreрхЈ kрхЄ kрхЈ) l@(MreрхЈ lрхЄ lрхЈ) m@(MreрхЈ mрхЄ mрхЈ) Рєњ
    (k ┬ирхЈ Рїю l РІЃрхЈ m РїЮ)
      №╝ЮРЪе ap! (zipWithрхЈ-eq {f = _or_} {b = l} {c = m}) РЪЕ
    (k ┬ирхЈ apрхЈ-body (next apрхЈ) (mapрхЈ-body _or_ (next (mapрхЈ _or_)) l) m)
      №╝ЮРЪе ap (╬╗ q Рєњ q k (apрхЈ-body (next apрхЈ) (mapрхЈ-body _or_ (next (mapрхЈ _or_)) l) m)) (fix-path ┬ирхЈ-body) РЪЕ
    ┬ирхЈ-body (next _┬ирхЈ_) k (apрхЈ-body (next apрхЈ) (mapрхЈ-body _or_ (next (mapрхЈ _or_)) l) m)
      №╝ЮРЪе ap┬▓ MreрхЈ (and-distrib-or-l kрхЄ lрхЄ mрхЄ) (fun-ext ╬╗ a Рєњ Рќ╣-ext (go {ihРќ╣ = ihРќ╣} {kрхЄ} {kрхЈ} {lрхЄ} {lрхЈ} {mрхЄ} {mрхЈ})) РЪЕ
    apрхЈ-body (next apрхЈ) (mapрхЈ-body _or_ (next (mapрхЈ _or_)) (┬ирхЈ-body (next _┬ирхЈ_) k l)) (┬ирхЈ-body (next _┬ирхЈ_) k m)
      №╝Ю╦ўРЪе ap (╬╗ q Рєњ apрхЈ-body (next apрхЈ) (mapрхЈ-body _or_ (next (mapрхЈ _or_)) (┬ирхЈ-body (next _┬ирхЈ_) k l)) (q k m)) (fix-path ┬ирхЈ-body) РЪЕ
    apрхЈ-body (next apрхЈ) (mapрхЈ-body _or_ (next (mapрхЈ _or_)) (┬ирхЈ-body (next _┬ирхЈ_) k l)) (k ┬ирхЈ m)
      №╝Ю╦ўРЪе ap (╬╗ q Рєњ apрхЈ-body (next apрхЈ) (mapрхЈ-body _or_ (next (mapрхЈ _or_)) (q k l)) (k ┬ирхЈ m)) (fix-path ┬ирхЈ-body) РЪЕ
    apрхЈ-body (next apрхЈ) (mapрхЈ-body _or_ (next (mapрхЈ _or_)) (k ┬ирхЈ l)) (k ┬ирхЈ m)
      №╝Ю╦ўРЪе zipWithрхЈ-eq {f = _or_} {b = k ┬ирхЈ l} {c = k ┬ирхЈ m} РЪЕ
    ((k ┬ирхЈ l) РІЃрхЈ (k ┬ирхЈ m))
      Рѕј
   where
   go : {ihРќ╣ : Рќ╣ ╬║ ((k l m : gLang ╬║ A) Рєњ (k ┬ирхЈ (l РІЃрхЈ m)) №╝Ю ((k ┬ирхЈ l) РІЃрхЈ (k ┬ирхЈ m)))}
        {kрхЄ : Bool} {kрхЈ : A Рєњ Рќ╣ ╬║ (gMoore ╬║ A Bool)}
        {lрхЄ : Bool} {lрхЈ : A Рєњ Рќ╣ ╬║ (gMoore ╬║ A Bool)}
        {mрхЄ : Bool} {mрхЈ : A Рєњ Рќ╣ ╬║ (gMoore ╬║ A Bool)}
        {a : A}
      Рєњ Рќ╣[ ╬▒ РѕХ ╬║ ] (condрхЈ kрхЄ (Рќ╣map _┬ирхЈ_ (kрхЈ a) РіЏ next (MreрхЈ (lрхЄ or mрхЄ) (╬╗ aРѓЂ Рєњ Рќ╣map _РІЃрхЈ_ (lрхЈ aРѓЂ) РіЏ mрхЈ aРѓЂ)))
                            (Рќ╣map _РІЃрхЈ_ (lрхЈ a) РіЏ mрхЈ a) ╬▒)
                    №╝Ю
                  ((Рќ╣map _РІЃрхЈ_ (condрхЈ kрхЄ (Рќ╣map _┬ирхЈ_ (kрхЈ a) РіЏ next (MreрхЈ lрхЄ lрхЈ)) (lрхЈ a))
                             РіЏ condрхЈ kрхЄ (Рќ╣map _┬ирхЈ_ (kрхЈ a) РіЏ next (MreрхЈ mрхЄ mрхЈ)) (mрхЈ a)) ╬▒)
   go {ihРќ╣} {kрхЄ = false} {kрхЈ} {lрхЄ} {lрхЈ} {mрхЄ} {mрхЈ} {a} =
     ╬╗ ╬▒ Рєњ ap (╬╗ q Рєњ kрхЈ a ╬▒ ┬ирхЈ MreрхЈ (lрхЄ or mрхЄ) q)
              (fun-ext ╬╗ aРѓЂ Рєњ Рќ╣-ext ╬╗ ╬▒РѓЂ Рєњ (╬╗ i Рєњ pfix apрхЈ-body (~ i) ╬▒РѓЂ (mapрхЈ _or_ (lрхЈ aРѓЂ ╬▒РѓЂ)) (mрхЈ aРѓЂ ╬▒РѓЂ))
                                         РѕЎ (╬╗ i Рєњ dfix apрхЈ-body ╬▒РѓЂ (pfix (mapрхЈ-body _or_) (~ i) ╬▒РѓЂ (lрхЈ aРѓЂ ╬▒РѓЂ)) (mрхЈ aРѓЂ ╬▒РѓЂ)))
         РѕЎ (ihРќ╣ РіЏ kрхЈ a РіЏРђ▓ next (MreрхЈ lрхЄ lрхЈ) РіЏРђ▓ next (MreрхЈ mрхЄ mрхЈ)) ╬▒
   go {ihРќ╣} {kрхЄ = true}  {kрхЈ} {lрхЄ} {lрхЈ} {mрхЄ} {mрхЈ} {a} =
     ╬╗ ╬▒ Рєњ ap (╬╗ q Рєњ ((kрхЈ a ╬▒) ┬ирхЈ MreрхЈ (lрхЄ or mрхЄ) q) РІЃрхЈ ((lрхЈ a ╬▒) РІЃрхЈ (mрхЈ a ╬▒)))
                     ((fun-ext ╬╗ aРѓЂ Рєњ Рќ╣-ext ╬╗ ╬▒РѓЂ Рєњ (╬╗ i Рєњ pfix apрхЈ-body (~ i) ╬▒РѓЂ (mapрхЈ _or_ (lрхЈ aРѓЂ ╬▒РѓЂ)) (mрхЈ aРѓЂ ╬▒РѓЂ))
                                                 РѕЎ (╬╗ i Рєњ dfix apрхЈ-body ╬▒РѓЂ (pfix (mapрхЈ-body _or_) (~ i) ╬▒РѓЂ (lрхЈ aРѓЂ ╬▒РѓЂ)) (mрхЈ aРѓЂ ╬▒РѓЂ))))
           РѕЎ ap (╬╗ q Рєњ q РІЃрхЈ ((lрхЈ a ╬▒) РІЃрхЈ (mрхЈ a ╬▒))) ((ihРќ╣ РіЏ kрхЈ a РіЏРђ▓ next (MreрхЈ lрхЄ lрхЈ) РіЏРђ▓ next (MreрхЈ mрхЄ mрхЈ)) ╬▒)
           РѕЎ unionрхЈ-swap-inner

concat-union-distrib-r : (k l m : Lang A)
                        Рєњ k ┬и (l РІЃ m) №╝Ю (k ┬и l) РІЃ (k ┬и m)
concat-union-distrib-r k l m = fun-ext ╬╗ ╬║ Рєњ concat-union-distrib-rрхЈ (k ╬║) (l ╬║) (m ╬║)

concat-assocрхЈ : (k l m : gLang ╬║ A)
              Рєњ (k ┬ирхЈ l) ┬ирхЈ m №╝Ю k ┬ирхЈ (l ┬ирхЈ m)
concat-assocрхЈ {╬║} = fix {k = ╬║} ╬╗ ihРќ╣ Рєњ ╬╗ where
  k@(MreрхЈ kрхЄ kрхЈ) l@(MreрхЈ lрхЄ lрхЈ) m@(MreрхЈ mрхЄ mрхЈ) Рєњ
    ((k ┬ирхЈ l) ┬ирхЈ m)
      №╝ЮРЪе ap (╬╗ q Рєњ (q k l) ┬ирхЈ m) (fix-path ┬ирхЈ-body) РЪЕ
    (┬ирхЈ-body (next _┬ирхЈ_) k l ┬ирхЈ m)
      №╝ЮРЪе ap (╬╗ q Рєњ q (┬ирхЈ-body (next _┬ирхЈ_) k l) m) (fix-path ┬ирхЈ-body) РЪЕ
    ┬ирхЈ-body (next _┬ирхЈ_) (┬ирхЈ-body (next _┬ирхЈ_) k l) m
      №╝ЮРЪе ap┬▓ MreрхЈ (and-assoc kрхЄ lрхЄ mрхЄ) (fun-ext ╬╗ a Рєњ Рќ╣-ext (go {ihРќ╣ = ihРќ╣} {kрхЄ} {kрхЈ} {lрхЄ} {lрхЈ} {mрхЄ} {mрхЈ})) РЪЕ
    ┬ирхЈ-body (next _┬ирхЈ_) k (┬ирхЈ-body (next _┬ирхЈ_) l m)
      №╝Ю╦ўРЪе ap (╬╗ q Рєњ q k (┬ирхЈ-body (next _┬ирхЈ_) l m)) (fix-path ┬ирхЈ-body) РЪЕ
    (k ┬ирхЈ ┬ирхЈ-body (next _┬ирхЈ_) l m)
      №╝Ю╦ўРЪе ap (╬╗ q Рєњ k ┬ирхЈ (q l m)) (fix-path ┬ирхЈ-body) РЪЕ
    (k ┬ирхЈ (l ┬ирхЈ m))
      Рѕј
   where
   go : {ihРќ╣ : Рќ╣ ╬║ ((k l m : gLang ╬║ A) Рєњ ((k ┬ирхЈ l) ┬ирхЈ m) №╝Ю (k ┬ирхЈ (l ┬ирхЈ m)))}
        {kрхЄ : Bool} {kрхЈ : A Рєњ Рќ╣ ╬║ (gMoore ╬║ A Bool)}
        {lрхЄ : Bool} {lрхЈ : A Рєњ Рќ╣ ╬║ (gMoore ╬║ A Bool)}
        {mрхЄ : Bool} {mрхЈ : A Рєњ Рќ╣ ╬║ (gMoore ╬║ A Bool)}
        {a : A}
      Рєњ Рќ╣[ ╬▒ РѕХ ╬║ ] (condрхЈ (kрхЄ and lрхЄ) (Рќ╣map _┬ирхЈ_ (condрхЈ kрхЄ (Рќ╣map _┬ирхЈ_ (kрхЈ a) РіЏ next (MreрхЈ lрхЄ lрхЈ)) (lрхЈ a)) РіЏ next (MreрхЈ mрхЄ mрхЈ)) (mрхЈ a) ╬▒)
                    №╝Ю
                  (condрхЈ kрхЄ (Рќ╣map _┬ирхЈ_ (kрхЈ a) РіЏ next (MreрхЈ (lрхЄ and mрхЄ) (╬╗ aРѓЂ Рєњ condрхЈ lрхЄ (Рќ╣map _┬ирхЈ_ (lрхЈ aРѓЂ) РіЏ next (MreрхЈ mрхЄ mрхЈ)) (mрхЈ aРѓЂ))))
                            (condрхЈ lрхЄ (Рќ╣map _┬ирхЈ_ (lрхЈ a) РіЏ next (MreрхЈ mрхЄ mрхЈ)) (mрхЈ a)) ╬▒)
   go {ihРќ╣} {kрхЄ = false} {kрхЈ} {lрхЄ = false} {lрхЈ} {mрхЄ} {mрхЈ} {a} =
     ╬╗ ╬▒ Рєњ (ihРќ╣ РіЏ kрхЈ a РіЏРђ▓ next (MreрхЈ false lрхЈ) РіЏРђ▓ next (MreрхЈ mрхЄ mрхЈ)) ╬▒
         РѕЎ ╬╗ i Рєњ (kрхЈ a ╬▒) ┬ирхЈ (MreрхЈ false (╬╗ aРѓЂ ╬▒РѓЂ Рєњ pfix ┬ирхЈ-body i ╬▒РѓЂ (lрхЈ aРѓЂ ╬▒РѓЂ) (MreрхЈ mрхЄ mрхЈ)))
   go {ihРќ╣} {kрхЄ = false} {kрхЈ} {lрхЄ = true}  {lрхЈ} {mрхЄ} {mрхЈ} {a} =
     ╬╗ ╬▒ Рєњ (ihРќ╣ РіЏ kрхЈ a РіЏРђ▓ next (MreрхЈ true lрхЈ) РіЏРђ▓ next (MreрхЈ mрхЄ mрхЈ)) ╬▒
         РѕЎ ╬╗ i Рєњ (kрхЈ a ╬▒) ┬ирхЈ (MreрхЈ mрхЄ (╬╗ aРѓЂ ╬▒РѓЂ Рєњ (pfix ┬ирхЈ-body i ╬▒РѓЂ (lрхЈ aРѓЂ ╬▒РѓЂ) (MreрхЈ mрхЄ mрхЈ)) РІЃрхЈ (mрхЈ aРѓЂ ╬▒РѓЂ)))
   go {ihРќ╣} {kрхЄ = true}  {kрхЈ} {lрхЄ = false} {lрхЈ} {mрхЄ} {mрхЈ} {a} =
     ╬╗ ╬▒ Рєњ concat-union-distrib-lрхЈ ((kрхЈ a ╬▒) ┬ирхЈ (MreрхЈ false lрхЈ)) (lрхЈ a ╬▒) (MreрхЈ mрхЄ mрхЈ)
         РѕЎ ap (_РІЃрхЈ (lрхЈ a ╬▒ ┬ирхЈ MreрхЈ mрхЄ mрхЈ)) ((ihРќ╣ РіЏ kрхЈ a РіЏРђ▓ next (MreрхЈ false lрхЈ) РіЏРђ▓ next (MreрхЈ mрхЄ mрхЈ)) ╬▒
                                                  РѕЎ ╬╗ i Рєњ (kрхЈ a ╬▒) ┬ирхЈ (MreрхЈ false (╬╗ aРѓЂ ╬▒РѓЂ Рєњ pfix ┬ирхЈ-body i ╬▒РѓЂ (lрхЈ aРѓЂ ╬▒РѓЂ) (MreрхЈ mрхЄ mрхЈ))))
   go {ihРќ╣} {kрхЄ = true}  {kрхЈ} {lрхЄ = true}  {lрхЈ} {mрхЄ} {mрхЈ} {a} =
     ╬╗ ╬▒ Рєњ ap (_РІЃрхЈ mрхЈ a ╬▒) (concat-union-distrib-lрхЈ ((kрхЈ a ╬▒) ┬ирхЈ (MreрхЈ true lрхЈ)) (lрхЈ a ╬▒) (MreрхЈ mрхЄ mрхЈ))
         РѕЎ unionрхЈ-assoc
         РѕЎ ap (_РІЃрхЈ ((lрхЈ a ╬▒ ┬ирхЈ MreрхЈ mрхЄ mрхЈ) РІЃрхЈ mрхЈ a ╬▒)) ((ihРќ╣ РіЏ kрхЈ a РіЏРђ▓ next (MreрхЈ true lрхЈ) РіЏРђ▓ next (MreрхЈ mрхЄ mрхЈ)) ╬▒
                                                         РѕЎ ╬╗ i Рєњ (kрхЈ a ╬▒) ┬ирхЈ (MreрхЈ mрхЄ (╬╗ aРѓЂ ╬▒РѓЂ Рєњ (pfix ┬ирхЈ-body i ╬▒РѓЂ (lрхЈ aРѓЂ ╬▒РѓЂ) (MreрхЈ mрхЄ mрхЈ)) РІЃрхЈ (mрхЈ aРѓЂ ╬▒РѓЂ))))

concat-assoc : (k l m : Lang A)
             Рєњ (k ┬и l) ┬и m №╝Ю k ┬и (l ┬и m)
concat-assoc k l m = fun-ext ╬╗ ╬║ Рєњ concat-assocрхЈ (k ╬║) (l ╬║) (m ╬║)

concat-empty-lрхЈ : (l : gLang ╬║ A) Рєњ РѕЁрхЈ ┬ирхЈ l №╝Ю РѕЁрхЈ
concat-empty-lрхЈ {╬║} = fix {k = ╬║} ╬╗ ihРќ╣ Рєњ ╬╗ where
  l@(MreрхЈ lрхЄ lрхЈ) Рєњ
    (Рїю РѕЁрхЈ РїЮ ┬ирхЈ l)
      №╝ЮРЪе ap! (fix-path (pureрхЈ-body false)) РЪЕ
    (pureрхЈ-body false (next РѕЁрхЈ) ┬ирхЈ l)
      №╝ЮРЪе ap (╬╗ q Рєњ q (pureрхЈ-body false (next РѕЁрхЈ)) l) (fix-path ┬ирхЈ-body) РЪЕ
    ┬ирхЈ-body (next _┬ирхЈ_) (pureрхЈ-body false (next РѕЁрхЈ)) l
      №╝ЮРЪе ap (MreрхЈ false) (fun-ext ╬╗ _ Рєњ Рќ╣-ext (ihРќ╣ РіЏ next l)) РЪЕ
    pureрхЈ-body false (next РѕЁрхЈ)
      №╝Ю╦ўРЪе fix-path (pureрхЈ-body false) РЪЕ
    РѕЁрхЈ
      Рѕј

concat-empty-l : (l : Lang A) Рєњ РѕЁ ┬и l №╝Ю РѕЁ
concat-empty-l l = fun-ext ╬╗ ╬║ Рєњ concat-empty-lрхЈ (l ╬║)

concat-empty-rрхЈ : (l : gLang ╬║ A) Рєњ l ┬ирхЈ РѕЁрхЈ №╝Ю РѕЁрхЈ
concat-empty-rрхЈ {╬║} = fix {k = ╬║} ╬╗ ihРќ╣ Рєњ ╬╗ where
  l@(MreрхЈ lрхЄ lрхЈ) Рєњ
    (l ┬ирхЈ Рїю РѕЁрхЈ РїЮ)
      №╝ЮРЪе ap! (fix-path (pureрхЈ-body false)) РЪЕ
    (l ┬ирхЈ pureрхЈ-body false (next РѕЁрхЈ))
      №╝ЮРЪе ap (╬╗ q Рєњ q l (pureрхЈ-body false (next РѕЁрхЈ))) (fix-path ┬ирхЈ-body) РЪЕ
    ┬ирхЈ-body (next _┬ирхЈ_) l (pureрхЈ-body false (next РѕЁрхЈ))
      №╝ЮРЪе ap┬▓ MreрхЈ (and-absorb-r lрхЄ) (fun-ext ╬╗ a Рєњ Рќ╣-ext (go {ihРќ╣ = ihРќ╣} {lрхЄ} {lрхЈ})) РЪЕ
    pureрхЈ-body false (next РѕЁрхЈ)
      №╝Ю╦ўРЪе fix-path (pureрхЈ-body false) РЪЕ
    РѕЁрхЈ
      Рѕј
    where
    go : {ihРќ╣ : Рќ╣ ╬║ ((l : gLang ╬║ A) Рєњ (l ┬ирхЈ РѕЁрхЈ) №╝Ю РѕЁрхЈ)}
         {lрхЄ : Bool} {lрхЈ : A Рєњ Рќ╣ ╬║ (gLang ╬║ A)}
         {a : A}
       Рєњ Рќ╣[ ╬▒ РѕХ ╬║ ] ((if lрхЄ then Рќ╣map _РІЃрхЈ_ (next _┬ирхЈ_ РіЏ lрхЈ a РіЏ next (MreрхЈ false (╬╗ _ Рєњ next РѕЁрхЈ))) РіЏ next РѕЁрхЈ
                            else next _┬ирхЈ_ РіЏ lрхЈ a РіЏ next (MreрхЈ false (╬╗ _ Рєњ next РѕЁрхЈ))) ╬▒)
                   №╝Ю РѕЁрхЈ
    go {ihРќ╣} {lрхЄ = false} {lрхЈ} {a} =
      ╬╗ ╬▒ Рєњ ap (lрхЈ a ╬▒ ┬ирхЈ_) (sym $ fix-path (pureрхЈ-body false))
          РѕЎ (ihРќ╣ РіЏ lрхЈ a) ╬▒
    go {ihРќ╣} {lрхЄ = true}  {lрхЈ} {a} =
      ╬╗ ╬▒ Рєњ union-empty-rрхЈ
          РѕЎ ap (lрхЈ a ╬▒ ┬ирхЈ_) (sym $ fix-path (pureрхЈ-body false))
          РѕЎ (ihРќ╣ РіЏ lрхЈ a) ╬▒

concat-empty-r : (l : Lang A) Рєњ l ┬и РѕЁ №╝Ю РѕЁ
concat-empty-r l = fun-ext ╬╗ ╬║ Рєњ concat-empty-rрхЈ (l ╬║)

concat-unit-lрхЈ : (l : gLang ╬║ A) Рєњ ╬хрхЈ ┬ирхЈ l №╝Ю l
concat-unit-lрхЈ {╬║} l@(MreрхЈ lрхЄ lрхЈ) =
  ╬хрхЈ ┬ирхЈ l
    №╝ЮРЪе (ap (╬╗ q Рєњ q ╬хрхЈ l) (fix-path ┬ирхЈ-body)) РЪЕ
  ┬ирхЈ-body (next _┬ирхЈ_) ╬хрхЈ l
    №╝ЮРЪе ap (MreрхЈ lрхЄ) (fun-ext ╬╗ a Рєњ Рќ╣-ext ╬╗ ╬▒ Рєњ (╬╗ i Рєњ condрхЈ true (next (concat-empty-lрхЈ (MreрхЈ lрхЄ lрхЈ) i)) (lрхЈ a) ╬▒)
                                              РѕЎ ╬╗ i Рєњ Рќ╣map (fun-ext {f = РѕЁрхЈ РІЃрхЈ_} (╬╗ l Рєњ union-empty-lрхЈ) i) (lрхЈ a) ╬▒) РЪЕ
  l
    Рѕј

concat-unit-l : (l : Lang A) Рєњ ╬х ┬и l №╝Ю l
concat-unit-l l = fun-ext ╬╗ ╬║ Рєњ concat-unit-lрхЈ (l ╬║)

concat-unit-rрхЈ : (l : gLang ╬║ A) Рєњ l ┬ирхЈ ╬хрхЈ №╝Ю l
concat-unit-rрхЈ {╬║} = fix {k = ╬║} ╬╗ ihРќ╣ Рєњ ╬╗ where
  l@(MreрхЈ lрхЄ lрхЈ) Рєњ
    l ┬ирхЈ ╬хрхЈ
      №╝ЮРЪе (ap (╬╗ q Рєњ q l ╬хрхЈ) (fix-path ┬ирхЈ-body)) РЪЕ
    ┬ирхЈ-body (next _┬ирхЈ_) l ╬хрхЈ
      №╝ЮРЪе ap┬▓ MreрхЈ (and-id-r lрхЄ) (fun-ext ╬╗ a Рєњ Рќ╣-ext ╬╗ ╬▒ Рєњ go {ihРќ╣ = ihРќ╣} {lрхЄ} {lрхЈ} ╬▒) РЪЕ
    l
      Рѕј
   where
   go : {ihРќ╣ : Рќ╣ ╬║ ((l : gLang ╬║ A) Рєњ l ┬ирхЈ ╬хрхЈ №╝Ю l)}
        {lрхЄ : Bool} {lрхЈ : A Рєњ Рќ╣ ╬║ (gMoore ╬║ A Bool)}
        {a : A}
      Рєњ Рќ╣[ ╬▒ РѕХ ╬║ ] (condрхЈ lрхЄ (Рќ╣map _┬ирхЈ_ (lрхЈ a) РіЏ next ╬хрхЈ) (next РѕЁрхЈ) ╬▒)
                    №╝Ю
                  (lрхЈ a ╬▒)
   go {ihРќ╣} {lрхЄ = false} {lрхЈ} {a} = ihРќ╣ РіЏ lрхЈ a
   go {ihРќ╣} {lрхЄ = true}  {lрхЈ} {a} = ╬╗ ╬▒ Рєњ union-empty-rрхЈ РѕЎ (ihРќ╣ РіЏ lрхЈ a) ╬▒

concat-unit-r : (l : Lang A) Рєњ l ┬и ╬х №╝Ю l
concat-unit-r l = fun-ext ╬╗ ╬║ Рєњ concat-unit-rрхЈ (l ╬║)

-- Kleene star laws

star-emptyрхЈ : (РѕЁрхЈ {╬║ = ╬║} {A = A}) №╝ірхЈ №╝Ю ╬хрхЈ
star-emptyрхЈ =
  Рїю РѕЁрхЈ РїЮ №╝ірхЈ
    №╝ЮРЪе ap! (fix-path (pureрхЈ-body false)) РЪЕ
  (pureрхЈ-body false (next РѕЁрхЈ) №╝ірхЈ)
    №╝ЮРЪе ap (╬╗ q Рєњ q (pureрхЈ-body false (next РѕЁрхЈ))) (fix-path №╝ірхЈ-body) РЪЕ
  №╝ірхЈ-body (next _№╝ірхЈ) (pureрхЈ-body false (next РѕЁрхЈ))
    №╝ЮРЪе ap (MreрхЈ true) (fun-ext ╬╗ a Рєњ Рќ╣-ext ╬╗ _ Рєњ concat-empty-lрхЈ ((MreрхЈ false (╬╗ _ Рєњ next РѕЁрхЈ)) №╝ірхЈ)) РЪЕ
  ╬хрхЈ
    Рѕј

star-empty : (РѕЁ {A = A}) №╝і №╝Ю ╬х
star-empty = fun-ext ╬╗ ╬║ Рєњ star-emptyрхЈ

star-concat-idemрхЈ : (l : gLang ╬║ A) Рєњ (l №╝ірхЈ) ┬ирхЈ (l №╝ірхЈ) №╝Ю l №╝ірхЈ
star-concat-idemрхЈ {╬║} = fix {k = ╬║} ╬╗ ihРќ╣ Рєњ ╬╗ where
  l@(MreрхЈ lрхЄ lрхЈ) Рєњ
      ((l №╝ірхЈ) ┬ирхЈ (l №╝ірхЈ))
        №╝ЮРЪе ap (╬╗ q Рєњ (q l ┬ирхЈ (l №╝ірхЈ))) (fix-path №╝ірхЈ-body) РЪЕ
      (№╝ірхЈ-body (next _№╝ірхЈ) l ┬ирхЈ (l №╝ірхЈ))
        №╝ЮРЪе ap (╬╗ q Рєњ №╝ірхЈ-body (next _№╝ірхЈ) l ┬ирхЈ q l) (fix-path №╝ірхЈ-body) РЪЕ
      (№╝ірхЈ-body (next _№╝ірхЈ) l ┬ирхЈ №╝ірхЈ-body (next _№╝ірхЈ) l)
        №╝ЮРЪе ap (╬╗ q Рєњ q (№╝ірхЈ-body (next _№╝ірхЈ) l) (№╝ірхЈ-body (next _№╝ірхЈ) l)) (fix-path ┬ирхЈ-body) РЪЕ
      ┬ирхЈ-body (next _┬ирхЈ_) (№╝ірхЈ-body (next _№╝ірхЈ) l) (№╝ірхЈ-body (next _№╝ірхЈ) l)
        №╝ЮРЪе ap (MreрхЈ true) (fun-ext ╬╗ a Рєњ Рќ╣-ext (go {ihРќ╣ = ihРќ╣} {lрхЄ} {lрхЈ} {a})) РЪЕ
      №╝ірхЈ-body (next _№╝ірхЈ) l
        №╝Ю╦ўРЪе ap (_$ l) (fix-path №╝ірхЈ-body) РЪЕ
      (l №╝ірхЈ)
        Рѕј
    where
    go : {ihРќ╣ : Рќ╣ ╬║ ((l : gLang ╬║ A) Рєњ ((l №╝ірхЈ) ┬ирхЈ (l №╝ірхЈ)) №╝Ю (l №╝ірхЈ))}
         {lрхЄ : Bool} {lрхЈ : A Рєњ Рќ╣ ╬║ (gMoore ╬║ A Bool)}
         {a : A}
       Рєњ Рќ╣[ ╬▒ РѕХ ╬║ ] ((Рќ╣map _РІЃрхЈ_ (Рќ╣map _┬ирхЈ_ (Рќ╣map _┬ирхЈ_ (lрхЈ a) РіЏ next ((MreрхЈ lрхЄ lрхЈ) №╝ірхЈ))
                                         РіЏ next (MreрхЈ true (╬╗ aРѓЂ Рєњ Рќ╣map _┬ирхЈ_ (lрхЈ aРѓЂ) РіЏ next ((MreрхЈ lрхЄ lрхЈ) №╝ірхЈ))))
                             РіЏ (Рќ╣map _┬ирхЈ_ (lрхЈ a) РіЏ (next ((MreрхЈ lрхЄ lрхЈ) №╝ірхЈ)))) ╬▒)
                     №╝Ю
                   ((lрхЈ a ╬▒) ┬ирхЈ ((MreрхЈ lрхЄ lрхЈ) №╝ірхЈ))
    go {ihРќ╣} {lрхЄ} {lрхЈ} {a} = ╬╗ ╬▒ Рєњ
       ((Рќ╣map _РІЃрхЈ_ (Рќ╣map _┬ирхЈ_ (Рќ╣map _┬ирхЈ_ (lрхЈ a) РіЏ next ((MreрхЈ lрхЄ lрхЈ) №╝ірхЈ))
                                         РіЏ next (MreрхЈ true (╬╗ aРѓЂ Рєњ Рќ╣map _┬ирхЈ_ (lрхЈ aРѓЂ) РіЏ next ((MreрхЈ lрхЄ lрхЈ) №╝ірхЈ))))
                             РіЏ (Рќ╣map _┬ирхЈ_ (lрхЈ a) РіЏ (next ((MreрхЈ lрхЄ lрхЈ) №╝ірхЈ)))) ╬▒)
         №╝ЮРЪе ap (╬╗ q Рєњ ((lрхЈ a ╬▒ ┬ирхЈ (MreрхЈ lрхЄ lрхЈ №╝ірхЈ)) ┬ирхЈ (MreрхЈ true q)) РІЃрхЈ (lрхЈ a ╬▒ ┬ирхЈ (MreрхЈ lрхЄ lрхЈ №╝ірхЈ)))
                (fun-ext ╬╗ aРѓЂ Рєњ Рќ╣-ext ╬╗ ╬▒РѓЂ Рєњ ap (lрхЈ aРѓЂ ╬▒РѓЂ ┬ирхЈ_) (╬╗ i Рєњ pfix №╝ірхЈ-body (~ i) ╬▒РѓЂ (MreрхЈ lрхЄ lрхЈ))) РЪЕ
       (Рїю (lрхЈ a ╬▒ ┬ирхЈ (MreрхЈ lрхЄ lрхЈ №╝ірхЈ)) ┬ирхЈ (MreрхЈ lрхЄ lрхЈ №╝ірхЈ) РїЮ РІЃрхЈ (lрхЈ a ╬▒ ┬ирхЈ (MreрхЈ lрхЄ lрхЈ №╝ірхЈ)))
         №╝ЮРЪе ap! (concat-assocрхЈ (lрхЈ a ╬▒) (MreрхЈ lрхЄ lрхЈ №╝ірхЈ) (MreрхЈ lрхЄ lрхЈ №╝ірхЈ)) РЪЕ
       ((lрхЈ a ╬▒ ┬ирхЈ Рїю (MreрхЈ lрхЄ lрхЈ №╝ірхЈ) ┬ирхЈ (MreрхЈ lрхЄ lрхЈ №╝ірхЈ) РїЮ) РІЃрхЈ (lрхЈ a ╬▒ ┬ирхЈ (MreрхЈ lрхЄ lрхЈ №╝ірхЈ)))
         №╝ЮРЪе ap! ((ihРќ╣ РіЏ next (MreрхЈ lрхЄ lрхЈ)) ╬▒) РЪЕ
       ((lрхЈ a ╬▒ ┬ирхЈ (MreрхЈ lрхЄ lрхЈ №╝ірхЈ)) РІЃрхЈ (lрхЈ a ╬▒ ┬ирхЈ (MreрхЈ lрхЄ lрхЈ №╝ірхЈ)))
         №╝ЮРЪе unionрхЈ-idem РЪЕ
       ((lрхЈ a ╬▒) ┬ирхЈ ((MreрхЈ lрхЄ lрхЈ) №╝ірхЈ))
         Рѕј

star-concat-idem : (l : Lang A) Рєњ (l №╝і) ┬и (l №╝і) №╝Ю l №╝і
star-concat-idem l = fun-ext ╬╗ ╬║ Рєњ star-concat-idemрхЈ (l ╬║)

star-idemрхЈ : (l : gLang ╬║ A) Рєњ (l №╝ірхЈ) №╝ірхЈ №╝Ю l №╝ірхЈ
star-idemрхЈ {╬║} = fix {k = ╬║} ╬╗ ihРќ╣ Рєњ ╬╗ where
  l@(MreрхЈ lрхЄ lрхЈ) Рєњ
     ((l №╝ірхЈ) №╝ірхЈ)
       №╝ЮРЪе ap (╬╗ q Рєњ q l №╝ірхЈ) (fix-path №╝ірхЈ-body) РЪЕ
     (№╝ірхЈ-body (next _№╝ірхЈ) l №╝ірхЈ)
       №╝ЮРЪе ap (╬╗ q Рєњ q (№╝ірхЈ-body (next _№╝ірхЈ) l)) (fix-path №╝ірхЈ-body) РЪЕ
     №╝ірхЈ-body (next _№╝ірхЈ) (№╝ірхЈ-body (next _№╝ірхЈ) l)
       №╝ЮРЪе ap (MreрхЈ true) (fun-ext ╬╗ a Рєњ Рќ╣-ext (go {ihРќ╣ = ihРќ╣} {lрхЄ} {lрхЈ} {a})) РЪЕ
     №╝ірхЈ-body (next _№╝ірхЈ) l
       №╝Ю╦ўРЪе ap (_$ l) (fix-path №╝ірхЈ-body) РЪЕ
     (l №╝ірхЈ)
       Рѕј
   where
   go : {ihРќ╣ : Рќ╣ ╬║ ((l : gLang ╬║ A) Рєњ ((l №╝ірхЈ) №╝ірхЈ) №╝Ю (l №╝ірхЈ))}
        {lрхЄ : Bool} {lрхЈ : A Рєњ Рќ╣ ╬║ (gMoore ╬║ A Bool)}
        {a : A}
      Рєњ Рќ╣[ ╬▒ РѕХ ╬║ ] ((((lрхЈ a ╬▒) ┬ирхЈ ((MreрхЈ lрхЄ lрхЈ) №╝ірхЈ))) ┬ирхЈ ((MreрхЈ true (╬╗ aРѓЂ Рєњ Рќ╣map _┬ирхЈ_ (lрхЈ aРѓЂ) РіЏ (next ((MreрхЈ lрхЄ lрхЈ) №╝ірхЈ)))) №╝ірхЈ))
                    №╝Ю
                  ((lрхЈ a ╬▒) ┬ирхЈ ((MreрхЈ lрхЄ lрхЈ) №╝ірхЈ))
   go {ihРќ╣} {lрхЄ} {lрхЈ} {a} = ╬╗ ╬▒ Рєњ
     ((((lрхЈ a ╬▒) ┬ирхЈ ((MreрхЈ lрхЄ lрхЈ) №╝ірхЈ))) ┬ирхЈ (MreрхЈ true Рїю (╬╗ aРѓЂ Рєњ Рќ╣map _┬ирхЈ_ (lрхЈ aРѓЂ) РіЏ (next ((MreрхЈ lрхЄ lрхЈ) №╝ірхЈ))) РїЮ №╝ірхЈ ))
       №╝ЮРЪе ap! (fun-ext ╬╗ aРѓЂ Рєњ Рќ╣-ext ╬╗ ╬▒РѓЂ Рєњ ap (lрхЈ aРѓЂ ╬▒РѓЂ ┬ирхЈ_) ╬╗ i Рєњ pfix №╝ірхЈ-body (~ i) ╬▒РѓЂ (MreрхЈ lрхЄ lрхЈ)) РЪЕ
     ((lрхЈ a ╬▒ ┬ирхЈ (MreрхЈ lрхЄ lрхЈ №╝ірхЈ)) ┬ирхЈ Рїю (MreрхЈ lрхЄ lрхЈ №╝ірхЈ) №╝ірхЈ РїЮ)
       №╝ЮРЪе ap! ((ihРќ╣ РіЏ next (MreрхЈ lрхЄ lрхЈ)) ╬▒) РЪЕ
     ((lрхЈ a ╬▒ ┬ирхЈ (MreрхЈ lрхЄ lрхЈ №╝ірхЈ)) ┬ирхЈ (MreрхЈ lрхЄ lрхЈ №╝ірхЈ))
       №╝ЮРЪе concat-assocрхЈ (lрхЈ a ╬▒) ((MreрхЈ lрхЄ lрхЈ) №╝ірхЈ) ((MreрхЈ lрхЄ lрхЈ) №╝ірхЈ) РЪЕ
     ((lрхЈ a ╬▒) ┬ирхЈ Рїю ((MreрхЈ lрхЄ lрхЈ) №╝ірхЈ) ┬ирхЈ ((MreрхЈ lрхЄ lрхЈ) №╝ірхЈ) РїЮ)
       №╝ЮРЪе ap! (star-concat-idemрхЈ (MreрхЈ lрхЄ lрхЈ)) РЪЕ
     ((lрхЈ a ╬▒) ┬ирхЈ ((MreрхЈ lрхЄ lрхЈ) №╝ірхЈ))
       Рѕј

star-idem : (l : Lang A) Рєњ (l №╝і) №╝і №╝Ю l №╝і
star-idem l = fun-ext ╬╗ ╬║ Рєњ star-idemрхЈ (l ╬║)

-- ArdenРђЎs rule

star-from-recрхЈ : (k l m : gLang ╬║ A)
               Рєњ ╬йрхЈ k №╝Ю false
               Рєњ l №╝Ю (k ┬ирхЈ l) РІЃрхЈ m
               Рєњ l №╝Ю (k №╝ірхЈ) ┬ирхЈ m
star-from-recрхЈ {╬║} = fix {k = ╬║} ╬╗ ihРќ╣ Рєњ ╬╗ where
  k@(MreрхЈ kрхЄ kрхЈ) l@(MreрхЈ lрхЄ lрхЈ) m@(MreрхЈ mрхЄ mрхЈ) ke le Рєњ
    l
      №╝ЮРЪе le РЪЕ
    ((k ┬ирхЈ l) РІЃрхЈ m)
      №╝ЮРЪе ap (╬╗ q Рєњ q k l РІЃрхЈ m) (fix-path ┬ирхЈ-body) РЪЕ
    (┬ирхЈ-body (next _┬ирхЈ_) k l РІЃрхЈ m)
      №╝ЮРЪе zipWithрхЈ-eq {f = _or_} {c = m} РЪЕ
    apрхЈ-body (next apрхЈ) (mapрхЈ-body _or_ (next (mapрхЈ _or_)) (┬ирхЈ-body (next _┬ирхЈ_) k l)) m
      №╝ЮРЪе ap┬▓ MreрхЈ (ap (╬╗ q Рєњ q and lрхЄ or mрхЄ) ke) (fun-ext ╬╗ a Рєњ Рќ╣-ext (go {ihРќ╣ = ihРќ╣} {kрхЄ} {kрхЈ} {lрхЄ} {lрхЈ} {mрхЄ} {mрхЈ} {ke} {le})) РЪЕ
    ┬ирхЈ-body (next _┬ирхЈ_) (№╝ірхЈ-body (next _№╝ірхЈ) k) m
      №╝Ю╦ўРЪе ap (╬╗ q Рєњ q (№╝ірхЈ-body (next _№╝ірхЈ) k) m) (fix-path ┬ирхЈ-body) РЪЕ
    (№╝ірхЈ-body (next _№╝ірхЈ) k ┬ирхЈ m)
      №╝Ю╦ўРЪе ap (╬╗ q Рєњ q k ┬ирхЈ m) (fix-path №╝ірхЈ-body) РЪЕ
    ((k №╝ірхЈ) ┬ирхЈ m)
     Рѕј
   where
   go : {ihРќ╣ : Рќ╣ ╬║ ((k l m : gLang ╬║ A) Рєњ ╬йрхЈ k №╝Ю false Рєњ l №╝Ю ((k ┬ирхЈ l) РІЃрхЈ m) Рєњ l №╝Ю ((k №╝ірхЈ) ┬ирхЈ m))}
        {kрхЄ : Bool} {kрхЈ : A Рєњ Рќ╣ ╬║ (gMoore ╬║ A Bool)}
        {lрхЄ : Bool} {lрхЈ : A Рєњ Рќ╣ ╬║ (gMoore ╬║ A Bool)}
        {mрхЄ : Bool} {mрхЈ : A Рєњ Рќ╣ ╬║ (gMoore ╬║ A Bool)}
        {ke : kрхЄ №╝Ю false}
        {le : MreрхЈ lрхЄ lрхЈ №╝Ю ((MreрхЈ kрхЄ kрхЈ ┬ирхЈ MreрхЈ lрхЄ lрхЈ) РІЃрхЈ MreрхЈ mрхЄ mрхЈ)}
        {a : A}
      Рєњ Рќ╣[ ╬▒ РѕХ ╬║ ] ((Рќ╣map _РІЃрхЈ_ (condрхЈ kрхЄ (Рќ╣map _┬ирхЈ_ (kрхЈ a) РіЏ next (MreрхЈ lрхЄ lрхЈ)) (lрхЈ a)) РіЏ mрхЈ a) ╬▒)
                    №╝Ю
                  (condрхЈ true (Рќ╣map _┬ирхЈ_ (Рќ╣map _┬ирхЈ_ (kрхЈ a) РіЏ next ((MreрхЈ kрхЄ kрхЈ) №╝ірхЈ)) РіЏ next (MreрхЈ mрхЄ mрхЈ)) (mрхЈ a) ╬▒)
   go {ihРќ╣ = ihРќ╣} {kрхЄ = false} {kрхЈ} {lрхЄ} {lрхЈ} {mрхЄ} {mрхЈ} {ke} {le} {a} = ╬╗ ╬▒ Рєњ
     ((kрхЈ a ╬▒) ┬ирхЈ Рїю MreрхЈ lрхЄ lрхЈ РїЮ) РІЃрхЈ (mрхЈ a ╬▒)
       №╝ЮРЪе ap! ((ihРќ╣ РіЏ next (MreрхЈ false kрхЈ) РіЏ next (MreрхЈ lрхЄ lрхЈ) РіЏ next (MreрхЈ mрхЄ mрхЈ) РіЏ next refl РіЏ next le) ╬▒) РЪЕ
     (Рїю(kрхЈ a ╬▒) ┬ирхЈ (((MreрхЈ false kрхЈ) №╝ірхЈ) ┬ирхЈ (MreрхЈ mрхЄ mрхЈ)) РїЮ РІЃрхЈ (mрхЈ a ╬▒))
       №╝Ю╦ўРЪе ap┬А (concat-assocрхЈ (kрхЈ a ╬▒) (MreрхЈ false kрхЈ №╝ірхЈ) (MreрхЈ mрхЄ mрхЈ)) РЪЕ
     ((((kрхЈ a ╬▒) ┬ирхЈ ((MreрхЈ false kрхЈ) №╝ірхЈ)) ┬ирхЈ (MreрхЈ mрхЄ mрхЈ)) РІЃрхЈ (mрхЈ a ╬▒))
       Рѕј
   go {ihРќ╣ = ihРќ╣} {kрхЄ = true}  {kрхЈ} {lрхЄ} {lрхЈ} {mрхЄ} {mрхЈ} {ke} {le} {a} =
     absurd (falseРЅаtrue (sym ke))

star-from-rec : (k l m : Lang A)
              Рєњ ╬йрхљ k №╝Ю false
              Рєњ l №╝Ю (k ┬и l) РІЃ m
              Рєњ l №╝Ю (k №╝і) ┬и m
star-from-rec k l m ke le =
  fun-ext ╬╗ ╬║ Рєњ star-from-recрхЈ (k ╬║) (l ╬║) (m ╬║)
                  (clock-irr (╬йрхЈ Рѕў k) РѕЎ ke)
                  (happly le ╬║)
